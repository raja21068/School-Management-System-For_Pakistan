/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view.panel;

import com.school.constant.D_Msg;
import com.school.dao.DatabaseQueryExecuter;
import com.school.log.AppLog;
import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.utils.AppMsg;
import com.school.utils.ComponentHandler;
import com.school.view.JkPanel;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAY
 */
public class EventsStudentPanel extends JkPanel{

    
    private Student student = null;
    private Campus campus = null;

    /**
     * Creates new form EventsStudentPanel
     */
    public EventsStudentPanel(UserPrivilege privilege , Campus camp) {
        super(privilege);
        this.campus = camp;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxSection = new javax.swing.JComboBox();
        comboBoxClass = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        buttonOK = new javax.swing.JButton();
        yearComboBox = new javax.swing.JComboBox();

        comboBoxSection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        comboBoxClass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClassItemStateChanged(evt);
            }
        });

        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Student", "Father", "Surname"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableStudents);

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        yearComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(yearComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboBoxClass, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        setClass();
        comboBoxClassItemStateChanged(null);
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void comboBoxClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClassItemStateChanged
        refreshStudent();
    }//GEN-LAST:event_comboBoxClassItemStateChanged

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        setVisible(false);
    }//GEN-LAST:event_buttonOKActionPerformed

    private void yearComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearComboBoxItemStateChanged
        comboBoxClassItemStateChanged(null);
    }//GEN-LAST:event_yearComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton buttonOK;
    private javax.swing.JComboBox comboBoxClass;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableStudents;
    private javax.swing.JComboBox yearComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
                ComponentHandler.setSection(comboBoxSection);
                ComponentHandler.setYear(yearComboBox);
                comboBoxSectionItemStateChanged(null);
                comboBoxClassItemStateChanged(null);
        
    }
    
        /**
     * set all class in combobox according to section. 
     */
    private void setClass() {
        ComponentHandler.setClasses(comboBoxSection, comboBoxClass);
        
    }

    /**
     * Set the students in table according to given campus and session
     * in constructor.
     */
    private void refreshStudent() {
        try {
            Classes cl = (Classes) comboBoxClass.getSelectedItem();
            Years year = ((Years)yearComboBox.getSelectedItem());
            if (cl == null || year == null) {
                return;
            }
            DefaultTableModel  model= (DefaultTableModel)tableStudents.getModel();
            ComponentHandler.emptyTable(tableStudents);
            buttonOK.setEnabled(false);
            List<StudentClassReg> regList =  DatabaseQueryExecuter.getStudentClassRegs(year.getYearId(), campus.getCampusId(),cl.getClassId(),true);
            for(int i=0;i<regList.size();i++) {
                StudentClassReg studentClassReg = regList.get(i);
                Student studentBean = studentClassReg.getStudent();
                String fatherName = studentBean.getFatherName();
                model.addRow(new Object[]{studentBean,fatherName,studentBean.getSurname()});
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * 
     */
    private void setSelectionModelListener(){
        tableStudents.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(tableStudents.getSelectedRow()<0){
                    return;
                }
                buttonOK.setEnabled(true);
                int row = tableStudents.getSelectedRow();
                student = (Student)tableStudents.getValueAt(row, 0);
            }
        });
    }
    
    /**
     * return the Student selected in table. called by Events frame.
     * @return 
     */
    public Student getSelectedStudent(){
        return student;
    }

    @Override
    protected void postInit() {
        setSelectionModelListener();
    }

    @Override
    protected void handlePrivilege() {
        
    }

    @Override
    protected void initComponentImplementation() {
        initComponents();
    }
}
