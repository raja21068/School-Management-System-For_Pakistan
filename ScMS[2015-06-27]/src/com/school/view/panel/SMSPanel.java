/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view.panel;

import com.school.constant.D_Msg;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.Section;
import com.school.model.SmsHistory;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.smshelper.Connect;
import com.school.config.SMS_CONFIG;
import com.school.log.AppLog;
import com.school.utils.AppMsg;
import com.school.utils.ComponentHandler;
import com.school.view.JkPanel;
import java.io.InputStream;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.comm.CommPortIdentifier;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.criterion.Order;

/**
 *
 * @author JAY
 */
public class SMSPanel extends JkPanel {
   
    private int CHECKBOX_COLUMN = 0,
            STUDENT_BEAN_COLUMN = 1,
            FATHER_COLUMN = 2,
            STUDENT_CLASS_REG_COLUMN = 3;
    Properties props = null;
    Connect connection = null;
    
    public SMSPanel(UserPrivilege privilege) {
        super(privilege);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        menuItemCheckAll = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxComPort = new javax.swing.JComboBox();
        buttonConnect = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        spinFieldSendingDelay = new com.toedter.components.JSpinField();
        jLabel4 = new javax.swing.JLabel();
        comboBoxBaudRate = new javax.swing.JComboBox();
        comboBoxDatabits = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        comboBoxStopbits = new javax.swing.JComboBox();
        comboBoxParity = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        buttonSaveProperties = new javax.swing.JButton();
        buttonDetect = new javax.swing.JButton();
        textFieldComPort = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        comboBoxCampus = new javax.swing.JComboBox();
        comboBoxBatch = new javax.swing.JComboBox();
        comboBoxClass = new javax.swing.JComboBox();
        comboBoxSection = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClassStudents = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        listStudents = new javax.swing.JList();
        buttonAddToList = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonSendStudent = new javax.swing.JButton();
        panelHistory = new javax.swing.JPanel();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        dateChooserTo = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();
        buttonViewHistory = new javax.swing.JButton();
        buttonPrintHistory = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMessage = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaStatus = new javax.swing.JTextArea();

        menuItemCheckAll.setText("Check All");
        menuItemCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllActionPerformed(evt);
            }
        });
        jPopupMenu1.add(menuItemCheckAll);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SMS SENDING");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Communication Properties"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("COMMUNICATION PORT*");

        comboBoxComPort.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        buttonConnect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonConnect.setText("Connect");
        buttonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectActionPerformed(evt);
            }
        });

        jLabel3.setText("BAUD RATE");

        jLabel4.setText("SENDING DELAY");

        comboBoxBaudRate.setModel(new javax.swing.DefaultComboBoxModel(SMS_CONFIG.BAUD_RATES_KEY));

        comboBoxDatabits.setModel(new javax.swing.DefaultComboBoxModel(SMS_CONFIG.DATABITS_KEY));

        jLabel5.setText("DATABITS");

        jLabel6.setText("STOPBITS");

        comboBoxStopbits.setModel(new javax.swing.DefaultComboBoxModel(SMS_CONFIG.STOPBITS_KEY));

        comboBoxParity.setModel(new javax.swing.DefaultComboBoxModel(SMS_CONFIG.PARITY_KEY));

        jLabel7.setText("PARITY");

        buttonSaveProperties.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonSaveProperties.setText("Save");
        buttonSaveProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSavePropertiesActionPerformed(evt);
            }
        });

        buttonDetect.setText("DETECT");
        buttonDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDetectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinFieldSendingDelay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(comboBoxComPort, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDetect, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxDatabits, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxBaudRate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxStopbits, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxParity, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonSaveProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldComPort)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBoxComPort)
                    .addComponent(buttonDetect, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldComPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spinFieldSendingDelay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDatabits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxStopbits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxParity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSaveProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        comboBoxBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchItemStateChanged(evt);
            }
        });

        comboBoxClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClassItemStateChanged(evt);
            }
        });

        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        tableClassStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Student", "Father", "Class", "Contact#"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableClassStudents.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tableClassStudents);

        listStudents.setModel(new DefaultListModel());
        jScrollPane3.setViewportView(listStudents);

        buttonAddToList.setText("Add to list");
        buttonAddToList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddToListActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonSendStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonSendStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/sms-6-icon.png"))); // NOI18N
        buttonSendStudent.setText("SEND");
        buttonSendStudent.setEnabled(false);
        buttonSendStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendStudentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(comboBoxBatch, 0, 127, Short.MAX_VALUE)
                            .addComponent(comboBoxCampus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxSection, 0, 127, Short.MAX_VALUE)
                            .addComponent(comboBoxClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(buttonAddToList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonSendStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAddToList, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSendStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Student", jPanel2);

        jLabel9.setText("From");

        jLabel10.setText("To");

        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gr#", "Student", "Father", "Date", "SMS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane5.setViewportView(tableHistory);

        buttonViewHistory.setText("View");
        buttonViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewHistoryActionPerformed(evt);
            }
        });

        buttonPrintHistory.setText("Print");
        buttonPrintHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHistoryLayout = new javax.swing.GroupLayout(panelHistory);
        panelHistory.setLayout(panelHistoryLayout);
        panelHistoryLayout.setHorizontalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(panelHistoryLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonViewHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPrintHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelHistoryLayout.setVerticalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateChooserFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonViewHistory)
                        .addComponent(buttonPrintHistory)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("History", panelHistory);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Message:");

        jScrollPane1.setEnabled(false);

        textAreaMessage.setColumns(20);
        textAreaMessage.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textAreaMessage.setRows(5);
        jScrollPane1.setViewportView(textAreaMessage);

        progressBar.setStringPainted(true);

        textAreaStatus.setColumns(20);
        textAreaStatus.setRows(5);
        jScrollPane4.setViewportView(textAreaStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jTabbedPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllActionPerformed
        int rows = tableClassStudents.getRowCount();
        for (int i = 0; i < rows; i++) {
            tableClassStudents.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_menuItemCheckAllActionPerformed

    private void buttonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectActionPerformed
        JButton button = (JButton) evt.getSource();
        if (button.getText().toLowerCase().startsWith("con")) {
            if (connection != null) {
                connection.close();
            }
            try {
                if (!textFieldComPort.getText().trim().isEmpty()) {
                    connection = new Connect(textFieldComPort.getText().trim(), props);
                } else {
                    if (comboBoxComPort.getSelectedItem() == null) {
                        AppMsg.info(this, D_Msg.MSG_79+"\n"+D_Msg.MSG_78);
                        return;
                    }
                    connection = new Connect((String) comboBoxComPort.getSelectedItem(), props);
                }
                AppMsg.info(this, D_Msg.MSG_80);
                button.setText("Disconnect");
                buttonSendStudent.setEnabled(true);
            } catch (Exception ex) {
                AppMsg.error(this, D_Msg.MSG_81 , ex);
                Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
            }
        } else {
            connection.close();
            connection = null;
            button.setText("Connect");
            buttonSendStudent.setEnabled(false);
        }
    }//GEN-LAST:event_buttonConnectActionPerformed

    private void buttonSavePropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePropertiesActionPerformed
        try {
            Properties props = Connect.prepareProperties((String) comboBoxBaudRate.getSelectedItem(), (String) comboBoxDatabits.getSelectedItem(), (String) comboBoxStopbits.getSelectedItem(), (String) comboBoxParity.getSelectedItem(), "" + spinFieldSendingDelay.getValue());
            Connect.saveProperties(props);
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_82 ,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonSavePropertiesActionPerformed

    private void buttonDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDetectActionPerformed
        try {
            Enumeration<CommPortIdentifier> ports = Connect.detectPorts();
            comboBoxComPort.removeAllItems();
            while (ports.hasMoreElements()) {
                CommPortIdentifier commPortIdentifier = ports.nextElement();
                System.out.println(commPortIdentifier.getCurrentOwner());
                comboBoxComPort.addItem(commPortIdentifier.getName());
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_83 , ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonDetectActionPerformed

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void comboBoxBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxBatchItemStateChanged

    private void comboBoxClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClassItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxClassItemStateChanged

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        Object ob = comboBoxSection.getSelectedItem();
        if (ob == null) {
            return;
        }
        if (ob instanceof Section) {
            Section sec = (Section) ob;
            try {
                comboBoxClass.setModel(new DefaultComboBoxModel(ComponentHandler.getClasses(sec).toArray()));
            } catch (Exception ex) {
                AppMsg.error(this, D_Msg.MSG_6,ex);
                Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
            }
        } else if (ob instanceof String) {
            try {
                List list = DatabaseManager.getData(Classes.class,Order.asc("sequenceNo"));
                comboBoxClass.setModel(new DefaultComboBoxModel(list.toArray()));
            } catch (Exception ex) {
                AppMsg.error(this, D_Msg.MSG_6,ex);
                Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
            }
        }
        comboBoxClass.addItem("---ALL---");
        comboBoxClassItemStateChanged(evt);
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void buttonAddToListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddToListActionPerformed
        int rows = tableClassStudents.getRowCount();
        DefaultListModel model = (DefaultListModel) listStudents.getModel();
        for (int i = 0; i < rows; i++) {
            boolean selected = (boolean) tableClassStudents.getValueAt(i, 0);
            if (!selected) {
                continue;
            }
            Student st = (Student) tableClassStudents.getValueAt(i, STUDENT_BEAN_COLUMN);
            model.addElement(st);
        }
    }//GEN-LAST:event_buttonAddToListActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        DefaultListModel model = (DefaultListModel) listStudents.getModel();
        model.clear();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonSendStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendStudentActionPerformed
        textAreaStatus.setText("");
        new Thread() {
            @Override
            public void run() {
                String message = textAreaMessage.getText().trim();
                if (message.isEmpty()) {
                    return;
                }
                DefaultListModel model = (DefaultListModel) listStudents.getModel();
                if (model.isEmpty()) {
                    return;
                }
                int numOfStudents = model.getSize();
                int progressStatus = 0;
                progressBar.setMinimum(progressStatus);
                progressBar.setMaximum(numOfStudents);
                for (int i = 0; i < numOfStudents; i++) {
                    Student student = (Student) model.get(i);
                    String contactNo = student.getContactNo();
                    if (contactNo.length() < 11) {
                    } else {
                        connection.send(contactNo, message);
                        try {
                            DatabaseManager.addData(new com.school.model.SmsHistory(student, message, new java.util.Date(), ""));
                        } catch (Exception ex) {
                            textAreaStatus.append(student + " history not saved in database\n");
                            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
                        }
                        model.remove(i);
                        i--;
                        numOfStudents--;
                    }
                    progressBar.setValue(++progressStatus);
                    progressBar.validate();
                }
            }
        }.start();
    }//GEN-LAST:event_buttonSendStudentActionPerformed

    private void buttonViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewHistoryActionPerformed
        Calendar dateFrom = dateChooserFrom.getCalendar();
        Calendar dateTo = dateChooserTo.getCalendar();
        dateFrom.set(dateFrom.get(Calendar.YEAR), dateFrom.get(Calendar.MONTH), dateFrom.get(Calendar.DATE), 0, 0);
        System.err.println(dateTo.getTime());
        ComponentHandler.emptyTable(tableHistory);
        if (dateFrom == null || dateTo == null) {
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tableHistory.getModel();
        try {
            List<SmsHistory> history = DatabaseQueryExecuter.getSMSHistory(dateFrom.getTime(), dateTo.getTime());
            Iterator<SmsHistory> it = history.iterator();
            while (it.hasNext()) {
                SmsHistory smsHistory = it.next();
                Student st = smsHistory.getStudent();
                model.addRow(new Object[]{st.getGrNo(), st.getStudentName(), st.getFatherName(), smsHistory.getSendDate(), smsHistory.getMessage()});
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonViewHistoryActionPerformed

    private void buttonPrintHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintHistoryActionPerformed
        try {
            JRTableModelDataSource ds = new JRTableModelDataSource(tableHistory.getModel());
            InputStream report = (getClass().getResource("/report/NewSMSHistory.jasper").openStream());
            JasperPrint print = JasperFillManager.fillReport(report,null, ds);
            JasperViewer.viewReport(print, false);
            //            PrinterJob job = PrinterJob.getPrinterJob();
            //            PageFormat pf = job.defaultPage();
            //            Paper paper = pf.getPaper();
            //            double margin = 10.;
            //            paper.setImageableArea(margin,
                //                    paper.getImageableY(),
                //                    paper.getWidth() - 2 * margin, paper.getImageableHeight());
            //            pf.setPaper(paper);
            //            MessageFormat header = new MessageFormat("SMS Report");
            //            MessageFormat footer = new MessageFormat("Page{0,number,integer}");
            //            job.setPrintable(tableHistory.getPrintable(JTable.PrintMode.FIT_WIDTH, header, footer),
                //                    job.validatePage(pf));
            //            if (job.printDialog()) {
                //                job.print();
                //            }
            //tableStudents.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
            AppMsg.error(this, D_Msg.MSG_6,ex);
        }
    }//GEN-LAST:event_buttonPrintHistoryActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddToList;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonConnect;
    private javax.swing.JButton buttonDetect;
    private javax.swing.JButton buttonPrintHistory;
    private javax.swing.JButton buttonSaveProperties;
    private javax.swing.JButton buttonSendStudent;
    private javax.swing.JButton buttonViewHistory;
    private javax.swing.JComboBox comboBoxBatch;
    private javax.swing.JComboBox comboBoxBaudRate;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxClass;
    private javax.swing.JComboBox comboBoxComPort;
    private javax.swing.JComboBox comboBoxDatabits;
    private javax.swing.JComboBox comboBoxParity;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JComboBox comboBoxStopbits;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private com.toedter.calendar.JDateChooser dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList listStudents;
    private javax.swing.JMenuItem menuItemCheckAll;
    private javax.swing.JPanel panelHistory;
    private javax.swing.JProgressBar progressBar;
    private com.toedter.components.JSpinField spinFieldSendingDelay;
    private javax.swing.JTable tableClassStudents;
    private javax.swing.JTable tableHistory;
    private javax.swing.JTextArea textAreaMessage;
    private javax.swing.JTextArea textAreaStatus;
    private javax.swing.JTextField textFieldComPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
        try {
            comboBoxBaudRate.setSelectedItem(props.get(Connect.BAUD_RATE_KEY));
            comboBoxDatabits.setSelectedItem(props.get(Connect.DATABIT_KEY));
            comboBoxStopbits.setSelectedItem(props.get(Connect.STOPBIT_KEY));
            comboBoxParity.setSelectedItem(props.get(Connect.PARITY_KEY));
            spinFieldSendingDelay.setValue(Integer.parseInt((String) props.get(Connect.SMS_DELAY_TIME_KEY)));
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_84 ,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
        new Thread() {
            @Override
            public void run() {
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setBatch(comboBoxBatch);
                ComponentHandler.setSection(comboBoxSection);
                comboBoxSection.addItem("--ALL--");
                comboBoxSectionItemStateChanged(null);
                refreshStudents();
            }
        }.start();
    }

    @Override
    protected void postInit() {
        ComponentHandler.setModelListener(tableClassStudents);
        ComponentHandler.setModelListenerForButton(tableClassStudents, buttonAddToList, 0);
        try {
            props = Connect.getProperties();
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_85 ,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    protected void handlePrivilege() {
        
    }

    @Override
    protected void initComponentImplementation() {
        initComponents();
    }
    
     private void refreshStudents() {
        try {
            Object ob = comboBoxClass.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            Years batch = (Years) comboBoxBatch.getSelectedItem();
            if (ob == null || camp == null || batch == null) {
                return;
            }
            ComponentHandler.emptyTable(tableClassStudents);
            if (ob instanceof String) {
                int items = comboBoxClass.getItemCount() - 1;
                for (int i = 0; i < items; i++) {
                    Classes clas = (Classes) comboBoxClass.getItemAt(i);
                    addStudentsToTable(camp, batch, clas);
                }
            } else if (ob instanceof Classes) {
                Classes clas = (Classes) ob;
                addStudentsToTable(camp, batch, clas);
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }
      private void addStudentsToTable(Campus camp, Years batch, Classes clas) {
        DefaultTableModel model = (DefaultTableModel) tableClassStudents.getModel();
        List<StudentClassReg> list = DatabaseQueryExecuter.getStudentClassRegs(batch.getYearId(), camp.getCampusId(),clas.getClassId(),true);
        for (int i = 0; i < list.size(); i++) {
            StudentClassReg classReg = list.get(i);
            Student st = classReg.getStudent();
            model.addRow(new Object[]{false, st, st.getFatherName(), classReg, st.getContactNo()});
        }
    }
}
