/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Awards;
import com.school.model.Campus;
import com.school.model.Student;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.model.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import com.school.utils.ComponentHandler;
import java.util.List;

/**
 * This frame related for events (occasion, competition, celebration events, etc) occur in school.  
 * @author JAY KUMAR
 */
public class EventsJFrame extends javax.swing.JFrame {

    /**
     * Creates new form EventsJFrame
     */
    EventStudents stdFrame = null;
    UserPrivilege privilege;
    public EventsJFrame(UserPrivilege privilege) {
        initComponents();
        setSelectionModelListener();
        this.privilege = privilege;
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if (!b) {
            return;
        }
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonAdd.setVisible(false);
            buttonAddAward.setVisible(false);
            buttonSelectionStudent.setVisible(false);
        }
        if (privilege.getIsDelete()== null || (!privilege.getIsDelete())) {
            buttonDelete.setVisible(false);
            buttonDeleteAward.setVisible(false);
        }
        new Thread() {
            @Override
            public void run() {
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setYear(comboBoxYear);
                refreshEvents();
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBoxYear = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textFieldEventDescription = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        dateChooserEvent = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        listEvents = new javax.swing.JList();
        buttonAdd = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAwards = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textFieldAwardName = new javax.swing.JTextField();
        textFieldPostion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textFieldRemarksAward = new javax.swing.JTextField();
        buttonSelectionStudent = new javax.swing.JButton();
        comboBoxStudent = new javax.swing.JComboBox();
        buttonAddAward = new javax.swing.JButton();
        buttonDeleteAward = new javax.swing.JButton();
        comboBoxCampus = new javax.swing.JComboBox();

        setTitle("EVENTS / COMPITIONS");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/pictures/medal-silver-1-icon.png"))).getImage());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EVENTS / COMPITITIONS");

        comboBoxYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Year");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Event");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Day");

        listEvents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listEvents.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listEventsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listEvents);

        buttonAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-add-icon.png"))); // NOI18N
        buttonAdd.setText("Add  ");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-delete-icon.png"))); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Positions"));

        tableAwards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Postion", "Award", "Student", "Father", "Surname", "Gr#", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAwards.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tableAwards);
        tableAwards.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableAwards.getColumnModel().getColumn(2).setPreferredWidth(150);
        tableAwards.getColumnModel().getColumn(3).setPreferredWidth(150);
        tableAwards.getColumnModel().getColumn(4).setPreferredWidth(130);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Award Name");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Postion");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Remarks");

        buttonSelectionStudent.setText("Select");
        buttonSelectionStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectionStudentActionPerformed(evt);
            }
        });

        buttonAddAward.setText("ADD");
        buttonAddAward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddAwardActionPerformed(evt);
            }
        });

        buttonDeleteAward.setText("DEL");
        buttonDeleteAward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteAwardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(buttonSelectionStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(comboBoxStudent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textFieldAwardName, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textFieldPostion, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textFieldRemarksAward, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonAddAward, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonDeleteAward, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonAdd)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonDelete)
                                        .addGap(0, 4, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldEventDescription)
                                            .addComponent(dateChooserEvent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(comboBoxCampus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(comboBoxYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(dateChooserEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textFieldEventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAdd)
                            .addComponent(buttonDelete)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSelectionStudent)
                            .addComponent(comboBoxStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(textFieldAwardName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(buttonAddAward, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonDeleteAward, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(textFieldPostion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(textFieldRemarksAward, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearItemStateChanged
        refreshEvents();
        if (stdFrame != null) {
            stdFrame.setVisible(false);
            stdFrame = null;
        }
    }//GEN-LAST:event_comboBoxYearItemStateChanged

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        try {
            com.school.model.Years year = (com.school.model.Years) comboBoxYear.getSelectedItem();
            if (year == null) {
                return;
            }
            com.school.model.Event event = new com.school.model.Event(year);
            if (!isSetEvents(event)) {
                return;
            }
            DatabaseManager.addData(event);
            JOptionPane.showMessageDialog(this, "Event Added..!");
            refreshEvents();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured.. \n" + ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        try {
            Years year = (Years) comboBoxYear.getSelectedItem();
            Event event = (Event) listEvents.getSelectedValue();
            if (evt == null || year == null) {
                return;
            }
            int option = JOptionPane.showConfirmDialog(this, "do you want to delete?","Delete",JOptionPane.YES_NO_OPTION);
            if(option == JOptionPane.NO_OPTION){
                return;
            }

            DatabaseManager.deleteData(event);
            JOptionPane.showMessageDialog(this, "Event Deleted..!");
            refreshEvents();
            ComponentHandler.emptyTable(tableAwards);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured.. \n" + ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void listEventsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listEventsValueChanged
        try {
            if(listEvents.isSelectionEmpty())return;
            Event event = (Event) listEvents.getSelectedValue();
            if (evt == null ) {
                return;
            }
            textFieldEventDescription.setText(event.getDesciption());
            dateChooserEvent.setDate(event.getDay());
            refreshAwards(event);
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }

    }//GEN-LAST:event_listEventsValueChanged

    private void buttonSelectionStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectionStudentActionPerformed
        try {
            Years batch = (Years) comboBoxYear.getSelectedItem();
            Campus campus = (Campus) comboBoxCampus.getSelectedItem();
            if (batch == null || stdFrame != null) {
                stdFrame.setVisible(true);
                return;
            }
            stdFrame = new EventStudents(campus);
            stdFrame.buttonOK.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    comboBoxStudent.setModel(new DefaultComboBoxModel(new Object[]{stdFrame.getSelectedStudent()}));
                }
            });
            stdFrame.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_buttonSelectionStudentActionPerformed

    private void buttonAddAwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddAwardActionPerformed
        try {
            com.school.model.Event event = (com.school.model.Event) listEvents.getSelectedValue();
            Student st = (Student) comboBoxStudent.getSelectedItem();
            if (evt == null) {
                return;
            }
            if (st == null) {
                JOptionPane.showMessageDialog(this, "Please Select STUDENT by pressing buton 'Select'");
                return;
            }
            Awards award = new Awards(event, st, textFieldAwardName.getText(), textFieldPostion.getText(), textFieldRemarksAward.getText());
            DatabaseManager.addData(award);
            JOptionPane.showMessageDialog(this, "Position added..!");
            refreshAwards(event);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured.. \n" + ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonAddAwardActionPerformed

    private void buttonDeleteAwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteAwardActionPerformed
        try {
            int row = tableAwards.getSelectedRow();
            if (row < 0) {
                return;
            }
            com.school.model.Event event = (com.school.model.Event) listEvents.getSelectedValue();
            if (evt == null) {
                return;
            }
            int option = JOptionPane.showConfirmDialog(this, "do you want to delete?","Delete",JOptionPane.YES_NO_OPTION);
            if(option == JOptionPane.NO_OPTION){
                return;
            }
            Awards award = (Awards) tableAwards.getValueAt(row, 0);
            event.getAwardses().remove(award);
            DatabaseManager.deleteData(award);
            JOptionPane.showMessageDialog(this, "Position deleted..!");
            refreshAwards(event);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured.. \n" + ex.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonDeleteAwardActionPerformed

    /**
     * Set the values from text field in bean.Event object.
     * @param event
     * @return true if bean.Event data is set without any interruption otherwise false. 
     */
    private boolean isSetEvents(com.school.model.Event event) {
        String name = textFieldEventDescription.getText();
        Date day = dateChooserEvent.getDate();
        if (name == null || name.trim().isEmpty() || day == null) {
            JOptionPane.showMessageDialog(this, "Event Name AND Day cannot be empty");
            return false;
        }
        event.setDesciption(name);
        event.setDay(day);
        return true;
    }

    /**
     * Refresh the list of awards of selected event (i.e occasion, competition, celebration events, etc).
     * @param event 
     */
    private void refreshAwards(com.school.model.Event event) {
        ComponentHandler.emptyTable(tableAwards);
        DefaultTableModel model = (DefaultTableModel) tableAwards.getModel();
        List<Awards> awardList =  DatabaseQueryExecuter.getAwards(event);
        for(int i=0;i<awardList.size();i++) {
            Awards awards = awardList.get(i);
            Student student = awards.getStudent();
            model.addRow(new Object[]{awards, awards.getAwardsName(),student , student.getFatherName(), student.getSurname(), student.getGrNo(), awards.getRemarks()});
        }
    }

    /**
     * Refresh events of selected year (session / batch) in list.
     */
    private void refreshEvents() {
        Years year = (Years) comboBoxYear.getSelectedItem();
        if (year == null) {
            return;
        }
        List<Event> eventList =  DatabaseQueryExecuter.getEvents(year);
        listEvents.setListData(eventList.toArray());
    }

    private void setSelectionModelListener() {
        tableAwards.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (tableAwards.getSelectedRow() < 0) {
                    return;
                }
                buttonDeleteAward.setEnabled(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAddAward;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonDeleteAward;
    private javax.swing.JButton buttonSelectionStudent;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxStudent;
    private javax.swing.JComboBox comboBoxYear;
    private com.toedter.calendar.JDateChooser dateChooserEvent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listEvents;
    private javax.swing.JTable tableAwards;
    private javax.swing.JTextField textFieldAwardName;
    private javax.swing.JTextField textFieldEventDescription;
    private javax.swing.JTextField textFieldPostion;
    private javax.swing.JTextField textFieldRemarksAward;
    // End of variables declaration//GEN-END:variables
}
