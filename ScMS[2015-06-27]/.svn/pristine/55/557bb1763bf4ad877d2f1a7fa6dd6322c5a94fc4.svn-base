/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Classes;
import com.school.model.Section;
import com.school.model.Subjects;
import com.school.model.UserPrivilege;
import com.school.constant.Subject;
import com.school.dao.DatabaseManager;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import com.school.utils.ComponentHandler;
import com.school.utils.Filter;

/**
 *
 * @author JAY KUMAR
 */
public class SectionJFrame extends javax.swing.JFrame {

    private int OBJECT_COLUMN = 0;
    private int NAME_COLUMN = 1;
    private int PASSING_MARKS_COLUMN = 2;
    private int TOTAL_MARKS_COLUMN = 3;
    private int REMARKS_COLUMN = 4;
    private int ISOLD_COLUMN = 5;
    private int SEQUENCE_COLUMN = 6;

    UserPrivilege privilege;
    /**
     * Creates new form SectionJFrame
     */
    
    public SectionJFrame(UserPrivilege privilege) {
        initComponents();
        ComponentHandler.setJFrameCenterPostion(this);
        ComponentHandler.setModelListener(tableSubjects);
        this.privilege = privilege;
        tableSubjects.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                buttonSubjectDelete.setEnabled(true);
            }
        });
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if(!b)return;
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonClassAdd.setVisible(false);
            buttonSectionAdd.setVisible(false);
            buttonSubjectAdd.setVisible(false);
        }
        if (privilege.getIsDelete() == null || (!privilege.getIsDelete())) {
            buttonClassDelete.setVisible(false);
            buttonSectionDelete.setVisible(false);
            buttonSubjectDelete.setVisible(false);
        }
        if (privilege.getIsUpdate() == null || (!privilege.getIsUpdate())) {
            buttonClassUpdate.setVisible(false);
            buttonSectionUpdate.setVisible(false);
        }
        refreshSection();
    }

    private void refreshSection() {
        try {
            buttonSectionDelete.setEnabled(false);
            buttonSectionUpdate.setEnabled(false);
            buttonClassAdd.setEnabled(false);
            buttonClassDelete.setEnabled(false);
            buttonClassUpdate.setEnabled(false);
            buttonSubjectAdd.setEnabled(false);
            buttonSubjectDelete.setEnabled(false);
            listSection.setListData(DatabaseManager.getData(Section.class).toArray());
            listClass.setListData(new Object[]{});
            ComponentHandler.emptyTable(tableSubjects);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    private void refreshClasses() {
        buttonSubjectAdd.setEnabled(false);
        buttonSubjectDelete.setEnabled(false);
        Section sec = (Section) listSection.getSelectedValue();
        try {
            listClass.setListData(DatabaseManager.getData(com.school.model.Classes.class.getName(), " section_id=" + sec.getSectionId(), " sequence_no asc").toArray());
            buttonClassDelete.setEnabled(false);
            buttonClassUpdate.setEnabled(false);
            ComponentHandler.emptyTable(tableSubjects);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    private void refreshSubjects() {
        ComponentHandler.emptyTable(tableSubjects);
        Classes cl = (Classes) listClass.getSelectedValue();
        buttonSubjectAdd.setEnabled(true);
        try {
            List<Subjects> list = DatabaseManager.getData(Subjects.class.getName(), " class_id=" + cl.getClassId(), " sequence_no  desc");
            DefaultTableModel model = (DefaultTableModel) tableSubjects.getModel();
            for (Subjects sub : list) {
                model.insertRow(0, new Object[]{sub, sub.getSubjectName(), sub.getPassingMarks(), sub.getTotalMarks(), sub.getRemarks(), sub.getIsOld() == Subject.OLD ? true : false, sub.getSequenceNo()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textFieldSectionId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textFieldSectionName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaSectionRemarks = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        buttonSectionAdd = new javax.swing.JButton();
        buttonSectionDelete = new javax.swing.JButton();
        buttonSectionUpdate = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listSection = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listClass = new javax.swing.JList();
        textFieldClassName = new javax.swing.JTextField();
        textFieldClassId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        buttonClassAdd = new javax.swing.JButton();
        buttonClassDelete = new javax.swing.JButton();
        buttonClassUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSubjects = new javax.swing.JTable();
        buttonSubjectAdd = new javax.swing.JButton();
        buttonSubjectDelete = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        spinFieldClassSequence = new com.toedter.components.JSpinField();
        textFieldClassRemarks = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setTitle("Section / Class / Subjects");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/pictures/menu_section.png"))).getImage());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SECTION");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ID");

        textFieldSectionId.setEditable(false);
        textFieldSectionId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Name");

        textFieldSectionName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Remarks");

        textAreaSectionRemarks.setColumns(20);
        textAreaSectionRemarks.setRows(5);
        jScrollPane2.setViewportView(textAreaSectionRemarks);

        buttonSectionAdd.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonSectionAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-add-icon.png"))); // NOI18N
        buttonSectionAdd.setText("Add");
        buttonSectionAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSectionAddActionPerformed(evt);
            }
        });
        jPanel2.add(buttonSectionAdd);

        buttonSectionDelete.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonSectionDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-delete-icon.png"))); // NOI18N
        buttonSectionDelete.setText("Delete");
        buttonSectionDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSectionDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(buttonSectionDelete);

        buttonSectionUpdate.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonSectionUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/document-arrow-up-icon.png"))); // NOI18N
        buttonSectionUpdate.setText("Update");
        buttonSectionUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSectionUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(buttonSectionUpdate);

        buttonClear.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/empty-icon.png"))); // NOI18N
        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });
        jPanel2.add(buttonClear);

        listSection.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSectionValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listSection);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CLASS");

        listClass.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listClassValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listClass);

        textFieldClassName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        textFieldClassId.setEditable(false);
        textFieldClassId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("ID");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Name");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Remarks");

        buttonClassAdd.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonClassAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-add-icon.png"))); // NOI18N
        buttonClassAdd.setText("Add");
        buttonClassAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassAddActionPerformed(evt);
            }
        });
        jPanel3.add(buttonClassAdd);

        buttonClassDelete.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonClassDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/database-delete-icon.png"))); // NOI18N
        buttonClassDelete.setText("Delete");
        buttonClassDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassDeleteActionPerformed(evt);
            }
        });
        jPanel3.add(buttonClassDelete);

        buttonClassUpdate.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        buttonClassUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/document-arrow-up-icon.png"))); // NOI18N
        buttonClassUpdate.setText("Update");
        buttonClassUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassUpdateActionPerformed(evt);
            }
        });
        jPanel3.add(buttonClassUpdate);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SUBJECTS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial Unicode MS", 1, 12))); // NOI18N
        jScrollPane1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        tableSubjects.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Name", "Passing Marks", "Total Marks", "Remarks", "Old", "Sequence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSubjects.setRowHeight(20);
        tableSubjects.getTableHeader().setReorderingAllowed(false);
        tableSubjects.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableSubjectsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableSubjects);
        tableSubjects.getColumnModel().getColumn(0).setMinWidth(30);
        tableSubjects.getColumnModel().getColumn(0).setPreferredWidth(30);
        tableSubjects.getColumnModel().getColumn(0).setMaxWidth(32);
        tableSubjects.getColumnModel().getColumn(5).setMinWidth(30);
        tableSubjects.getColumnModel().getColumn(5).setPreferredWidth(30);
        tableSubjects.getColumnModel().getColumn(5).setMaxWidth(50);
        tableSubjects.getColumnModel().getColumn(6).setMinWidth(60);
        tableSubjects.getColumnModel().getColumn(6).setPreferredWidth(60);
        tableSubjects.getColumnModel().getColumn(6).setMaxWidth(60);

        buttonSubjectAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/add-icon (1).png"))); // NOI18N
        buttonSubjectAdd.setText("Add");
        buttonSubjectAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubjectAddActionPerformed(evt);
            }
        });

        buttonSubjectDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/minus-icon.png"))); // NOI18N
        buttonSubjectDelete.setText("Delete");
        buttonSubjectDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubjectDeleteActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Sequence");

        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("Press Enter To save after changing in cell");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldSectionId, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldSectionName, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldClassName, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(textFieldClassId)
                                    .addComponent(spinFieldClassSequence, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textFieldClassRemarks))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonSubjectAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSubjectDelete)
                                .addGap(93, 93, 93)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textFieldSectionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldSectionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textFieldClassId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textFieldClassName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinFieldClassSequence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(textFieldClassRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSubjectAdd)
                    .addComponent(buttonSubjectDelete)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSubjectAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubjectAddActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableSubjects.getModel();
        model.insertRow(tableSubjects.getRowCount(), new Object[]{null, "", 33, 100, "", false, 0});
    }//GEN-LAST:event_buttonSubjectAddActionPerformed

    private void buttonSubjectDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubjectDeleteActionPerformed
        int rows[] = tableSubjects.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) tableSubjects.getModel();
        for(int i=0;i<rows.length;i++){
            Object ob = tableSubjects.getValueAt(rows[0], OBJECT_COLUMN);
            if(ob instanceof Subjects){
                DatabaseManager.deleteData(ob);
            }
            model.removeRow(rows[0]);
        }
    }//GEN-LAST:event_buttonSubjectDeleteActionPerformed

    private void buttonSectionAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSectionAddActionPerformed
        String name = textFieldSectionName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name should not be empty");
            return;
        }
        name = Filter.filterString(name);
        String remarks = Filter.filterString(textAreaSectionRemarks.getText());
        try {
            Section sec = new Section(name);
            sec.setRemarks(remarks);
            DatabaseManager.addData(sec);
            refreshSection();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonSectionAddActionPerformed

    private void buttonSectionDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSectionDeleteActionPerformed
        Section sec = (Section) listSection.getSelectedValue();
        try {
            DatabaseManager.deleteData(sec);
            refreshSection();
            clear();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonSectionDeleteActionPerformed

    private void buttonSectionUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSectionUpdateActionPerformed
        Section sec = (Section) listSection.getSelectedValue();
        String name = textFieldSectionName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name should not be empty");
            return;
        }
        sec.setName(Filter.filterString(name));
        sec.setRemarks(Filter.filterString(textAreaSectionRemarks.getText()));

        try {
            DatabaseManager.updateData(sec);
            refreshSection();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonSectionUpdateActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        clear();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void listSectionValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSectionValueChanged
        Section sec = (Section) listSection.getSelectedValue();
        if (sec == null) {
            return;
        }
        textAreaSectionRemarks.setText(sec.getRemarks());
        textFieldSectionId.setText("" + sec.getSectionId());
        textFieldSectionName.setText(sec.getName());
        buttonSectionDelete.setEnabled(true);
        buttonSectionUpdate.setEnabled(true);
        buttonClassAdd.setEnabled(true);
        refreshClasses();
    }//GEN-LAST:event_listSectionValueChanged

    private void buttonClassAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClassAddActionPerformed
        Section sec = (Section) listSection.getSelectedValue();
        String name = textFieldClassName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name should not be empty");
            return;
        }
        name = Filter.filterString(name);
        String remarks = Filter.filterString(textFieldClassRemarks.getText());
        try {
            Classes cl = new Classes(sec, name);
            cl.setRemarks(remarks);
            cl.setSequenceNo(spinFieldClassSequence.getValue());
            DatabaseManager.addData(cl);
            refreshClasses();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonClassAddActionPerformed

    private void buttonClassUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClassUpdateActionPerformed
        String name = textFieldClassName.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name should not be empty");
            return;
        }
        Classes cl = (Classes) listClass.getSelectedValue();
        cl.setClassName(name);
        cl.setRemarks(textFieldClassRemarks.getText());
        cl.setSequenceNo(spinFieldClassSequence.getValue());
        try {
            DatabaseManager.updateData(cl);
            refreshClasses();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonClassUpdateActionPerformed

    private void buttonClassDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClassDeleteActionPerformed
        Classes cl = (Classes) listClass.getSelectedValue();
        try {
            DatabaseManager.deleteData(cl);
            refreshClasses();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonClassDeleteActionPerformed

    private void listClassValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listClassValueChanged
        Classes cl = (Classes) listClass.getSelectedValue();
        if (cl == null) {
            return;
        }
        textFieldClassId.setText("" + cl.getClassId());
        textFieldClassName.setText(cl.getClassName());
        textFieldClassRemarks.setText(cl.getRemarks());
        spinFieldClassSequence.setValue(cl.getSequenceNo());
        buttonClassDelete.setEnabled(true);
        buttonClassUpdate.setEnabled(true);
        refreshSubjects();
    }//GEN-LAST:event_listClassValueChanged

    private void tableSubjectsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSubjectsKeyReleased
        int totalRows = tableSubjects.getRowCount();
        
        for (int rowNo = 0; rowNo < totalRows; rowNo++) {
            Object ob = tableSubjects.getValueAt(rowNo, OBJECT_COLUMN);
            if (ob instanceof Subjects) {
                Subjects sub = (Subjects) ob;
                setSubjectProperties(sub, rowNo);
                try {
                    DatabaseManager.updateData(sub);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
                    ex.printStackTrace(System.err);
                }
            } else {
                Subjects sub = new Subjects();
                setSubjectProperties(sub, rowNo);
                try {
                    DatabaseManager.addData(sub);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
                    ex.printStackTrace(System.err);
                }
            }
        }
        refreshSubjects();
    }//GEN-LAST:event_tableSubjectsKeyReleased

    private void setSubjectProperties(Subjects sub, int rowNo) {
        Classes cl = (Classes)listClass.getSelectedValue();
        sub.setClasses(cl);
        sub.setIsOld(tableSubjects.getValueAt(rowNo, ISOLD_COLUMN) == true ? Subject.OLD : Subject.NOT_OLD);
        sub.setPassingMarks((int) tableSubjects.getValueAt(rowNo, PASSING_MARKS_COLUMN));
        sub.setRemarks((String) tableSubjects.getValueAt(rowNo, REMARKS_COLUMN));
        sub.setSequenceNo((int) tableSubjects.getValueAt(rowNo, SEQUENCE_COLUMN));
        sub.setSubjectName((String) tableSubjects.getValueAt(rowNo, NAME_COLUMN));
        sub.setTotalMarks((int) tableSubjects.getValueAt(rowNo, TOTAL_MARKS_COLUMN));
    }

    private void clear() {
        textAreaSectionRemarks.setText("");
        textFieldClassId.setText("");
        textFieldClassName.setText("");
        textFieldClassRemarks.setText("");
        textFieldSectionId.setText("");
        textFieldSectionName.setText("");
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton buttonClassAdd;
    public javax.swing.JButton buttonClassDelete;
    public javax.swing.JButton buttonClassUpdate;
    public javax.swing.JButton buttonClear;
    public javax.swing.JButton buttonSectionAdd;
    public javax.swing.JButton buttonSectionDelete;
    public javax.swing.JButton buttonSectionUpdate;
    private javax.swing.JButton buttonSubjectAdd;
    private javax.swing.JButton buttonSubjectDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listClass;
    private javax.swing.JList listSection;
    private com.toedter.components.JSpinField spinFieldClassSequence;
    private javax.swing.JTable tableSubjects;
    private javax.swing.JTextArea textAreaSectionRemarks;
    private javax.swing.JTextField textFieldClassId;
    private javax.swing.JTextField textFieldClassName;
    private javax.swing.JTextField textFieldClassRemarks;
    private javax.swing.JTextField textFieldSectionId;
    private javax.swing.JTextField textFieldSectionName;
    // End of variables declaration//GEN-END:variables
}
