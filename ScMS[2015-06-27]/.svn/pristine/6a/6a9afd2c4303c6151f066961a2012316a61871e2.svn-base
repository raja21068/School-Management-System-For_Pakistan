/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Attendence;
import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.Months;
import com.school.model.Section;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.jtable.sort.JTableJKSort;
import com.school.utils.ComponentHandler;
import javax.swing.JFrame;

/**
 *
 * @author JAY KUMAR
 */
public class StudentAttendenceJFrame extends javax.swing.JFrame {

    private int STUDENT_CLASS_REG_COL = 0;
    private int PRESENT_DAYS_COL = 3;
    private int LEAVE_DAYS_COL = 4; // remarks in attendence used as a Leave
    UserPrivilege privilege;
    Classes selectedClass = null;
    boolean changeOccured = false;
    /**
     * Creates new form StudentAttendenceJFrame
     */
    public StudentAttendenceJFrame(UserPrivilege privilege) {
        initComponents();
        ComponentHandler.setJFrameCenterPostion((JFrame)this);
        this.privilege = privilege;
        JTableJKSort sort = new JTableJKSort(tableAttendence);
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if (!b) {
            return;
        }
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonSave.setVisible(false);
        }
        new Thread() {
            public void run() {
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setBatch(comboBoxBatch);
                ComponentHandler.setSection(comboBoxSection);
                setClass();
                ComponentHandler.setYear(comboBoxYear);
                ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
                ComponentHandler.setCurrentMonth(comboBoxMonth);
            }
        }.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxCampus = new javax.swing.JComboBox();
        comboBoxBatch = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboBoxSection = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        listClass = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxYear = new javax.swing.JComboBox();
        comboBoxMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAttendence = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        spinFieldTotalDays = new com.toedter.components.JSpinField();
        checkBoxIncludeLeaved = new javax.swing.JCheckBox();
        buttonSave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setTitle("STUDENT ATTENDENCE");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/pictures/menu_attend.png"))).getImage());

        jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel.setText("Session");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Campus");

        comboBoxCampus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        comboBoxBatch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Section");

        comboBoxSection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Class", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        listClass.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        listClass.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listClassValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listClass);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STUDENT ATTENDENCE");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Year");

        comboBoxYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearItemStateChanged(evt);
            }
        });

        comboBoxMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonthItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Month");

        tableAttendence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class", "St. Name", "Father", "Present Days", "Leave"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAttendence.getTableHeader().setReorderingAllowed(false);
        tableAttendence.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableAttendenceKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableAttendence);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Total Days");

        checkBoxIncludeLeaved.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxIncludeLeaved.setText("INCLUDE LEAVED");
        checkBoxIncludeLeaved.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        checkBoxIncludeLeaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIncludeLeavedActionPerformed(evt);
            }
        });

        buttonSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-document-save-icon.png"))); // NOI18N
        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("Press Enter after changing in cell. 'A' for absent in paper otherwise marks.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxBatch, 0, 113, Short.MAX_VALUE)
                                    .addComponent(comboBoxYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxMonth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxSection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkBoxIncludeLeaved, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinFieldTotalDays, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(spinFieldTotalDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel)
                            .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxIncludeLeaved)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonSave)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(8, 8, 8))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void comboBoxBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxBatchItemStateChanged

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        setClass();
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void listClassValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listClassValueChanged
        Classes cl = (Classes) listClass.getSelectedValue();
        if(changeOccured){
            int option = JOptionPane.showConfirmDialog(this, "Do you want to save changes?");
            if(option == JOptionPane.YES_OPTION){
                buttonSaveActionPerformed(null);
            }
            else if(option == JOptionPane.NO_OPTION){
                
            }
            else if(option == JOptionPane.CANCEL_OPTION){
                return;
            }
        }
        if (cl == selectedClass) {
            System.err.println("returnd");
            return;
        } else {
            selectedClass = cl;
        }
        refreshStudents();
    }//GEN-LAST:event_listClassValueChanged

    private void comboBoxYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearItemStateChanged
        ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
        refreshStudents();
    }//GEN-LAST:event_comboBoxYearItemStateChanged

    private void comboBoxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonthItemStateChanged
        refreshStudents();
    }//GEN-LAST:event_comboBoxMonthItemStateChanged

    private void checkBoxIncludeLeavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIncludeLeavedActionPerformed
        refreshStudents();
    }//GEN-LAST:event_checkBoxIncludeLeavedActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableAttendence.getModel();
        Classes clas = (Classes) listClass.getSelectedValue();
        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years batch = (Years) comboBoxBatch.getSelectedItem();
        Months mon = (Months) comboBoxMonth.getSelectedItem();
        if (clas == null || camp == null || batch == null) {
            return;
        }
        int rows = model.getRowCount();
        for (int rNo = 0; rNo < rows; rNo++) {
            Object ob = model.getValueAt(rNo, PRESENT_DAYS_COL);
            Object abs = model.getValueAt(rNo, LEAVE_DAYS_COL);
            if (ob == null) {
                continue;
            }
            int present = 0;
            try {
                present = Integer.parseInt(ob.toString());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error Occured in Table at Row: " + (rNo + 1) + " , hence not updated", "Warning", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            if (ob instanceof String) {
                
                StudentClassReg reg = (StudentClassReg) model.getValueAt(rNo, STUDENT_CLASS_REG_COL);
                try {
                    
                    List attenList = DatabaseQueryExecuter.getAttendence(reg, mon);
                    if (attenList.isEmpty()) {
                        Attendence attendence = new Attendence(mon, reg, spinFieldTotalDays.getValue(), present,abs!=null ?abs.toString() : null);
                        DatabaseManager.addData(attendence);
                        System.err.println("saving: " + ob);
                    } else if (attenList.size() > 1) {
                        JOptionPane.showMessageDialog(this, "UnExpected Error, Report To Deveoper\n Single Studemt has more than one attendence in single month of " + reg.getStudent().getStudentName(), "Warning", JOptionPane.ERROR_MESSAGE);
                    } else if (attenList.size() == 1) {
                        Attendence attendence = (Attendence) attenList.get(0);
                        attendence.setPresentDays(present);
                        if(abs!=null)attendence.setRemarks(abs.toString());
                        attendence.setTotalDays(spinFieldTotalDays.getValue());
                        DatabaseManager.updateData(attendence);
                        System.err.println("updating: " + ob);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error Occured in Table at Row: " + (rNo + 1));
                    ex.printStackTrace(System.err);
                }
            } else if (ob instanceof Attendence) {
               
                Attendence attendence = (Attendence) ob;
                attendence.setTotalDays(spinFieldTotalDays.getValue());
                try {
                    DatabaseManager.updateData(attendence);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error Occured in Table at Row: " + (rNo + 1) + " , hence not updated", "Warning", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace(System.err);
                    continue;
                }
                continue;
            } else {
                JOptionPane.showMessageDialog(this, "UnExpected Type in Table at Row:" + (rNo + 1) + "\n" + ob.getClass());
            }
        }
        changeOccured = false;
        JOptionPane.showMessageDialog(this, "Saved Successfully...!");
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void tableAttendenceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableAttendenceKeyReleased
        changeOccured = true;
    }//GEN-LAST:event_tableAttendenceKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxIncludeLeaved;
    private javax.swing.JComboBox comboBoxBatch;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxMonth;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JComboBox comboBoxYear;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listClass;
    private com.toedter.components.JSpinField spinFieldTotalDays;
    private javax.swing.JTable tableAttendence;
    // End of variables declaration//GEN-END:variables

    private void setClass() {
        Section sec = (Section) comboBoxSection.getSelectedItem();
        if (sec == null) {
            return;
        }
        try {
            listClass.setListData(ComponentHandler.getClasses(sec).toArray());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    private synchronized void refreshStudents() {
        DefaultTableModel model = (DefaultTableModel) tableAttendence.getModel();
        ComponentHandler.emptyTable(tableAttendence);

        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years years = (Years) comboBoxBatch.getSelectedItem();
        Months mon = (Months) comboBoxMonth.getSelectedItem();
        int total = 0;
        if (camp == null || years == null || mon == null) {
            return;
        }


        Classes cl = (Classes) listClass.getSelectedValue();
        if (cl == null) {
            return;
        }
//          if (!checkBoxIncludeLeaved.isSelected()) {
//            stdCrit.add(Restrictions.isNull("dateOfLeaving"));
//        }
        
        spinFieldTotalDays.setValue(0);
        List list = DatabaseQueryExecuter.getStudentClassRegs(years.getYearId(), camp.getCampusId(), cl.getClassId(), checkBoxIncludeLeaved.isSelected());
        
        for (Object ob : list) {
            StudentClassReg reg = (StudentClassReg) ob;
//            StudentClassReg reg = (StudentClassReg) st.getStudentClassRegs().toArray()[0];
            Object present = null;
            try {
                List attenList = DatabaseQueryExecuter.getAttendence(reg, mon);
                if (!attenList.isEmpty() || attenList.size() == 1) {
                    present = (Attendence) attenList.get(0);
//                    Student student = (Student)list.get(0);
//                    Set set = (student).getStudentClassRegs();
//                    StudentClassReg stClassReg = ((StudentClassReg) set.toArray()[0]);
//                    present =  stClassReg.getAttendences().toArray()[0];
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error Generated...\n" + ex.getMessage());
                ex.printStackTrace(System.err);
            }
            Student st = reg.getStudent();

            model.addRow(new Object[]{reg, st, st.getFatherName(), present, present != null ? ((Attendence) present).getRemarks() : null});
            if (total == 0 && present != null) {
                System.err.println("" + present.getClass());
            }
            if (total == 0 && present instanceof Attendence) {
                spinFieldTotalDays.setValue(((Attendence) present).getTotalDays());
            }
        }
        changeOccured = false;
    }
}
