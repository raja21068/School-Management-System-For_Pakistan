/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view.panel;

import com.school.constant.D_Msg;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.log.AppLog;
import com.school.model.Campus;
import com.school.model.EmpAccountCategory;
import com.school.model.EmpAccounts;
import com.school.model.Months;
import com.school.model.Salary;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.report.bean.EmployeeMonthsReportBean;
import com.school.report.bean.PaySlipReportBean;
import com.school.utils.AppMsg;
import com.school.utils.ComponentHandler;
import com.school.view.JkPanel;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author JAY
 */
public class SalaryManagePanel extends JkPanel {

    final int EMPACC_COLUMN = 1;
        
    public SalaryManagePanel(UserPrivilege privilege) {
        super(privilege);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboBoxEmplyeeCategory = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comboBoxCampus = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployees = new javax.swing.JTable();
        checkBoxIncludeLeaved = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxYear = new javax.swing.JComboBox();
        comboBoxMonth = new javax.swing.JComboBox();
        checkBoxDefinedSalary = new javax.swing.JCheckBox();
        textFieldSalary = new javax.swing.JTextField();
        buttonPay = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePaidEmployees = new javax.swing.JTable();
        textFieldCasualAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textFieldWarningAmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textFieldLateAmount = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textFieldWentEarlyAmount = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textFieldOherAmount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textFieldBonusAmount = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        textFieldCasualRemarks = new javax.swing.JTextField();
        textFieldWarningRemarks = new javax.swing.JTextField();
        textFieldLateRemarks = new javax.swing.JTextField();
        textFieldWentEarlyRemarks = new javax.swing.JTextField();
        textFieldOherRemarks = new javax.swing.JTextField();
        textFieldBonusRemarks = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        textFieldDepositAmount = new javax.swing.JTextField();
        textFieldDepositRemarks = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        textFieldRemarks = new javax.swing.JTextField();
        buttonPrintMonthSalaries = new javax.swing.JButton();
        buttonPaySlip = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        spinFieldWorkingDays = new com.toedter.components.JSpinField();

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SALARY / PAYMENT");

        comboBoxEmplyeeCategory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboBoxEmplyeeCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxEmplyeeCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxEmplyeeCategoryItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Employee / Account Category*");

        comboBoxCampus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Campus*");

        tableEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name", "Father", "Pay", "Campus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableEmployees.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableEmployees);

        checkBoxIncludeLeaved.setText("Include Leaved");
        checkBoxIncludeLeaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIncludeLeavedActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Monthly"));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Year");

        comboBoxYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearItemStateChanged(evt);
            }
        });

        comboBoxMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonthItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxMonth, 0, 123, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        checkBoxDefinedSalary.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkBoxDefinedSalary.setSelected(true);
        checkBoxDefinedSalary.setText("Defined Salary");
        checkBoxDefinedSalary.setEnabled(false);
        checkBoxDefinedSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDefinedSalaryActionPerformed(evt);
            }
        });

        textFieldSalary.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        textFieldSalary.setText("0");
        textFieldSalary.setEnabled(false);

        buttonPay.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Shopping-money-bag-icon.png"))); // NOI18N
        buttonPay.setText("Pay");
        buttonPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPayActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PAID EMPLOYEES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N

        tablePaidEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Father", "Paid Salary", "Campus", "accountNo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePaidEmployees.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablePaidEmployees.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablePaidEmployees);

        textFieldCasualAmount.setText("0");

        jLabel5.setText("Leave");

        jLabel7.setText("Warning");

        textFieldWarningAmount.setText("0");

        jLabel8.setText("Late");

        textFieldLateAmount.setText("0");

        jLabel9.setText("Went Early");

        textFieldWentEarlyAmount.setText("0");

        jLabel10.setText("Other");

        textFieldOherAmount.setText("0");

        jLabel11.setText("Bonus");

        textFieldBonusAmount.setText("0");

        jLabel12.setText("Amount");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel13.setText("Remarks");

        jLabel14.setText("Deposit");

        textFieldDepositAmount.setText("0");

        jLabel15.setText("Remarks");

        buttonPrintMonthSalaries.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrintMonthSalaries.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintMonthSalaries.setText("Print Bank Report");
        buttonPrintMonthSalaries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintMonthSalariesActionPerformed(evt);
            }
        });

        buttonPaySlip.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPaySlip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPaySlip.setText("Slip");
        buttonPaySlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPaySlipActionPerformed(evt);
            }
        });

        jLabel16.setText("Working Days");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textFieldBonusAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(textFieldOherAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(buttonPay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(textFieldCasualAmount)
                                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(textFieldWarningAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(textFieldLateAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(textFieldWentEarlyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(textFieldDepositAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textFieldCasualRemarks)
                                    .addComponent(textFieldWarningRemarks)
                                    .addComponent(textFieldLateRemarks)
                                    .addComponent(textFieldWentEarlyRemarks)
                                    .addComponent(textFieldOherRemarks)
                                    .addComponent(textFieldBonusRemarks)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textFieldDepositRemarks)
                                    .addComponent(buttonPaySlip, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinFieldWorkingDays, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(buttonPrintMonthSalaries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCampus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxEmplyeeCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxIncludeLeaved, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxDefinedSalary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldRemarks)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxEmplyeeCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxIncludeLeaved))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(textFieldRemarks, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldSalary, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(checkBoxDefinedSalary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinFieldWorkingDays, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(textFieldCasualAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldCasualRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldWarningAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(textFieldWarningRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldLateAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(textFieldLateRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(textFieldWentEarlyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldWentEarlyRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldOherAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(textFieldOherRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldBonusAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(textFieldBonusRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(textFieldDepositAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldDepositRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonPay, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(buttonPaySlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPrintMonthSalaries, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxEmplyeeCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxEmplyeeCategoryItemStateChanged
        refreshEmployees();
    }//GEN-LAST:event_comboBoxEmplyeeCategoryItemStateChanged

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
        refreshEmployees();
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void checkBoxIncludeLeavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIncludeLeavedActionPerformed
        refreshEmployees();
    }//GEN-LAST:event_checkBoxIncludeLeavedActionPerformed

    private void comboBoxYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearItemStateChanged
        ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
    }//GEN-LAST:event_comboBoxYearItemStateChanged

    private void comboBoxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonthItemStateChanged
        refreshPaidEmployees();
    }//GEN-LAST:event_comboBoxMonthItemStateChanged

    private void checkBoxDefinedSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDefinedSalaryActionPerformed
        if (checkBoxDefinedSalary.isSelected()) {
            textFieldSalary.setText("0");
            textFieldSalary.setEnabled(false);
        } else {
            textFieldSalary.setEnabled(true);
        }
    }//GEN-LAST:event_checkBoxDefinedSalaryActionPerformed

    private void buttonPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPayActionPerformed
        Months month = (Months) comboBoxMonth.getSelectedItem();
        if (month == null) {
            return;
        }
        Integer salary = 0, casualLeaveAmount = 0, warningAmount = 0, lateAmount = 0, wentEarlyAmount = 0, otherAmount = 0, bonusAmount = 0, depositAmount = 0;
        String casualRemarks = textFieldCasualRemarks.getText();
        String warningRemarks = textFieldWarningRemarks.getText();
        String lateRemarks = textFieldLateRemarks.getText();
        String wentRemarks = textFieldWentEarlyRemarks.getText();
        String otherRemarks = textFieldOherRemarks.getText();
        String bonusRemarks = textFieldBonusRemarks.getText();
        String depositRemarks = textFieldDepositRemarks.getText();
        String remarks = textFieldRemarks.getText();

        casualLeaveAmount = getAmount(textFieldCasualAmount.getText());
        warningAmount = getAmount(textFieldWarningAmount.getText());
        lateAmount = getAmount(textFieldLateAmount.getText());
        wentEarlyAmount = getAmount(textFieldWentEarlyAmount.getText());
        otherAmount = getAmount(textFieldOherAmount.getText());
        bonusAmount = getAmount(textFieldBonusAmount.getText());
        depositAmount = getAmount(textFieldDepositAmount.getText());

        int totalDeduction = casualLeaveAmount + warningAmount + lateAmount + wentEarlyAmount + otherAmount+depositAmount;
        int workingDays = spinFieldWorkingDays.getValue();
        if (!checkBoxDefinedSalary.isSelected()) {
            try {
                salary = Integer.parseInt(textFieldSalary.getText().trim());
            } catch (Exception ex) {
                AppMsg.warning(this, D_Msg.MSG_62);
                Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
                return;
            }
            if (salary == 0) {
                AppMsg.warning(this, D_Msg.MSG_63);
                return;
            }
        }

        int rowsTotal = tableEmployees.getRowCount();
        String error = "";
        for (int i = 0; i < rowsTotal; i++) {
            if (!(Boolean) tableEmployees.getValueAt(i, 0)) {
                continue;
            }
            EmpAccounts emp = (EmpAccounts) tableEmployees.getValueAt(i, EMPACC_COLUMN);
            if (checkBoxDefinedSalary.isSelected()) {
                if (emp.getTotalAmount() > 0) {
                    int amount = (emp.getBasicSalary()
                        + emp.getTravelingAllowance()
                        + emp.getOtherAllowance()
                        + emp.getCoordinateAllowace()
                        + emp.getCtAllowance()
                        + emp.getFiveYearAllowance()
                        + emp.getHeadAllowance()
                        + emp.getMedicalAllowance()
                        + bonusAmount)
                    - (totalDeduction)
                    ;
                    DatabaseManager.addData(new Salary(emp, month, amount, remarks, depositAmount, casualLeaveAmount, warningAmount, lateAmount, wentEarlyAmount, otherAmount, bonusAmount, depositRemarks, casualRemarks, warningRemarks, lateRemarks, wentRemarks, otherRemarks, bonusRemarks, emp.getBasicSalary(), emp.getTravelingAllowance(), emp.getOtherAllowance(), emp.getCoordinateAllowace(), emp.getFiveYearAllowance(), emp.getMedicalAllowance(), emp.getCtAllowance(), emp.getHeadAllowance(), workingDays));
                } else {
                    error += (emp.getName() + "\n");
                }
            } else {
                DatabaseManager.addData(new Salary(emp, month, salary, remarks, depositAmount, casualLeaveAmount, warningAmount, lateAmount, wentEarlyAmount, otherAmount, bonusAmount, depositRemarks, casualRemarks, warningRemarks, lateRemarks, wentRemarks, otherRemarks, bonusRemarks, emp.getBasicSalary(), emp.getTravelingAllowance(), emp.getOtherAllowance(), emp.getCoordinateAllowace(), emp.getFiveYearAllowance(), emp.getMedicalAllowance(), emp.getCtAllowance(), emp.getHeadAllowance(), workingDays));
            }

        }
        if (!error.isEmpty()) {
            AppMsg.error(this, error + D_Msg.MSG_64);
        } else {
            AppMsg.info(this, D_Msg.MSG_65);
        }
        refreshPaidEmployees();
    }//GEN-LAST:event_buttonPayActionPerformed

    private void buttonPrintMonthSalariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintMonthSalariesActionPerformed
        printSalaryBankReport();
        /*This report is not in used*/
        //        printPaidEmployees();
    }//GEN-LAST:event_buttonPrintMonthSalariesActionPerformed

    private void buttonPaySlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPaySlipActionPerformed
        try {
            Months mon = (Months) comboBoxMonth.getSelectedItem();
            if (mon == null) {
                return;
            }
            Map<String, Object> params = new HashMap();
            List<PaySlipReportBean> sal = DatabaseQueryExecuter.getPaySlipReportBeans(mon);
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(sal);
            InputStream report = getClass().getResource("/report/PaySlip.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_28,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonPaySlipActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPay;
    private javax.swing.JButton buttonPaySlip;
    private javax.swing.JButton buttonPrintMonthSalaries;
    private javax.swing.JCheckBox checkBoxDefinedSalary;
    private javax.swing.JCheckBox checkBoxIncludeLeaved;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxEmplyeeCategory;
    private javax.swing.JComboBox comboBoxMonth;
    private javax.swing.JComboBox comboBoxYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.components.JSpinField spinFieldWorkingDays;
    private javax.swing.JTable tableEmployees;
    private javax.swing.JTable tablePaidEmployees;
    private javax.swing.JTextField textFieldBonusAmount;
    private javax.swing.JTextField textFieldBonusRemarks;
    private javax.swing.JTextField textFieldCasualAmount;
    private javax.swing.JTextField textFieldCasualRemarks;
    private javax.swing.JTextField textFieldDepositAmount;
    private javax.swing.JTextField textFieldDepositRemarks;
    private javax.swing.JTextField textFieldLateAmount;
    private javax.swing.JTextField textFieldLateRemarks;
    private javax.swing.JTextField textFieldOherAmount;
    private javax.swing.JTextField textFieldOherRemarks;
    private javax.swing.JTextField textFieldRemarks;
    private javax.swing.JTextField textFieldSalary;
    private javax.swing.JTextField textFieldWarningAmount;
    private javax.swing.JTextField textFieldWarningRemarks;
    private javax.swing.JTextField textFieldWentEarlyAmount;
    private javax.swing.JTextField textFieldWentEarlyRemarks;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
                ComponentHandler.setCampus(comboBoxCampus);
                setCategories();
                ComponentHandler.setYear(comboBoxYear);
                ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
                refreshEmployees();
                refreshPaidEmployees();
        
    }

    @Override
    protected void postInit() {
        ComponentHandler.setModelListenerForButton(tableEmployees, buttonPay, 0);
    }

    @Override
    protected void handlePrivilege() {
        
    }

    @Override
    protected void initComponentImplementation() {
        initComponents();
    }
    
     private void refreshEmployees() {
        try {
            EmpAccountCategory cat = (EmpAccountCategory) comboBoxEmplyeeCategory.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();

            if (camp == null || cat == null) {
                return;
            }
            ComponentHandler.emptyTable(tableEmployees);
            DefaultTableModel model = (DefaultTableModel) tableEmployees.getModel();
                    
            List<EmpAccounts> list = DatabaseQueryExecuter.getEmpAccounts(camp, cat,checkBoxIncludeLeaved.isSelected());
            for (int i=0;i<list.size();i++) {
                EmpAccounts empAccounts = list.get(i);
                model.addRow(new Object[]{false, empAccounts, empAccounts.getFather(), empAccounts.getTotalAmount(), empAccounts.getCampus().getName()});
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    private void setCategories() {
        try {
            comboBoxEmplyeeCategory.setModel(new DefaultComboBoxModel(DatabaseManager.getData(EmpAccountCategory.class).toArray()));
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshPaidEmployees() {
        Months mon = (Months) comboBoxMonth.getSelectedItem();
        if (mon == null) {
            return;
        }
        ComponentHandler.emptyTable(tablePaidEmployees);
        DefaultTableModel model = (DefaultTableModel) tablePaidEmployees.getModel();

        try {
            List<Object[]> salaryList = DatabaseQueryExecuter.getSalaries(mon);
            for(int i=0;i<salaryList.size();i++) {
                Object[] salary = salaryList.get(i);
                String empAccountName = (String)salary[0];
                String fatherName = (String)salary[1];
                Integer salaryAmount = (Integer)salary[2];
                String campusName = (String)salary[3];
                String bankAccountNo = (String)salary[4];
                model.addRow(new Object[]{empAccountName, fatherName,salaryAmount , campusName,bankAccountNo});
            }
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    private int getAmount(String text) {
        try {
            return Integer.parseInt(text);
        } catch (Exception ex) {
        }
        return 0;
    }

    private void printPaidEmployees() {
        try {
            Months mon = (Months) comboBoxMonth.getSelectedItem();
            Years year = (Years) comboBoxYear.getSelectedItem();
            if (mon == null || year == null) {
                return;
            }
            Map<String, Object> params = new HashMap();
            params.put("monthName", mon.getMonthName());
            params.put("yearName", "" + year.getYearName());
            ArrayList list = new ArrayList();
            int rows = tablePaidEmployees.getRowCount();
            for (int no = 0; no < rows; no++) {
                com.school.report.bean.EmployeeMonthsReportBean emp = new com.school.report.bean.EmployeeMonthsReportBean();
                emp.setEmployeeName((String) tablePaidEmployees.getValueAt(no, 0));
                emp.setFather((String) tablePaidEmployees.getValueAt(no, 1));
                emp.setPaid((Integer) tablePaidEmployees.getValueAt(no, 2));
                list.add(emp);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(list);
            JasperReport report = JasperCompileManager.compileReport(getClass().getResource("/report/EmployeeMonthPaid.jrxml").openStream());
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_28,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void printSalaryBankReport() {
        try {
            Months mon = (Months) comboBoxMonth.getSelectedItem();
            Years year = (Years) comboBoxYear.getSelectedItem();
            if (mon == null || year == null) {
                return;
            }
            DecimalFormat form = new DecimalFormat("#,###.00");
            Map<String, Object> params = new HashMap();
            params.put("monthName", mon.getMonthName());
            params.put("yearName", "" + year.getYearName());
            ArrayList list = new ArrayList();
            int rows = tablePaidEmployees.getRowCount();
            for (int no = 0; no < rows; no++) {
                EmployeeMonthsReportBean emp = new EmployeeMonthsReportBean();
                emp.setEmployeeName((String)tablePaidEmployees.getValueAt(no, 0));
                emp.setFather((String) tablePaidEmployees.getValueAt(no, 1));
                emp.setPaid((Integer) tablePaidEmployees.getValueAt(no, 2));
                emp.setBankAccountNo((String)tablePaidEmployees.getValueAt(no, 4));
                emp.setPaidAmountFormatted( form.format(tablePaidEmployees.getValueAt(no, 2)) );
                list.add(emp);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(list);
            InputStream report = getClass().getResource("/report/EmployeeSalaryBankReport.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_28,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }
}
