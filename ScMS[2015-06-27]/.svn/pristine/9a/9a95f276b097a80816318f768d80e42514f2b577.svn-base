/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Module;
import com.school.model.UserPrivilege;
import static com.school.dao.Handler.DB_DRIVER_KEY;
import static com.school.dao.Handler.DB_PASSWORD_KEY;
import static com.school.dao.Handler.DB_URL_KEY;
import static com.school.dao.Handler.DB_USERNAME_KEY;
import static com.school.dao.Handler.createDefaultPropsFile;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JOptionPane;
import com.school.utils.ComponentHandler;

/**
 * This frame is for 2 jobs.
 * <ol>
 * <li> For import database .sql file and importing modules (for
 * privileges)</li>
 * <li> Change the database configuration like driver, url, username and
 * password.</li>
 * </ol>
 *
 * @author JAY KUMAR
 */
public class DatabaseConfig extends javax.swing.JFrame {

    /**
     * Creates new form DatabaseConfig
     */
    public static final int SAVE_OPTION = 1;
    public static final int NEXT_OPTION = 2;
    Properties props = null;

    /**
     *
     * @param option - SAVE_OPTION : for saving configuration. - NEXT_OPTION :
     * for importing wizard.
     *
     */
    public DatabaseConfig(int option) {
        initComponents();
        ComponentHandler.setJFrameCenterPostion(this);
        if (option == SAVE_OPTION) {
            buttonSave.setVisible(true);
            buttonNext.setVisible(false);
            try {
                props = com.school.dao.Handler.getDatabaseProperties();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error getting database configuration", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace(System.err);
            }
        } else {
            buttonSave.setVisible(false);
            buttonNext.setVisible(true);
            try {
                props = com.school.dao.Handler.createDefaultPropsFile();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error Creating File\nPlease Place project in another directory\nOR CONTACT WITH DEVELOPER", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace(System.err);
                System.exit(-1);
            }
        }

        setPropsInField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textFieldDriver = new javax.swing.JTextField();
        textFieldURL = new javax.swing.JTextField();
        textFieldUsername = new javax.swing.JTextField();
        textFieldPassword = new javax.swing.JTextField();
        buttonNext = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        labelProcessing = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DATABASE");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("DRIVER");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("URL");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("USERNAME");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("PASSWORD");

        textFieldDriver.setEditable(false);
        textFieldDriver.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        textFieldURL.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        textFieldUsername.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        textFieldPassword.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        buttonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-go-next-icon.png"))); // NOI18N
        buttonNext.setText("Next");
        buttonNext.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-document-save-icon.png"))); // NOI18N
        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        labelProcessing.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(labelProcessing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldURL)
                            .addComponent(textFieldUsername)
                            .addComponent(textFieldPassword)
                            .addComponent(textFieldDriver))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFieldURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonNext, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(buttonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(labelProcessing)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, textFieldDriver, textFieldPassword, textFieldURL, textFieldUsername});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        new Thread() {
            public void run() {
                try {

                    ProcessingThread t = new ProcessingThread("Saving Database Properties");
                    t.start();
                    saveProps();
                    t.terminate();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error occured Saving File", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace(System.err);
                    System.exit(-1);
                }
            }
        }.start();
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed

        new Thread() {
            public void run() {
                try {
                    buttonNext.setEnabled(false);
                    ProcessingThread t = new ProcessingThread("Saving Database Properties");
                    t.start();
                    saveProps();
                    t.setMessage("Importing Database");
                    System.err.println("User: " + props.getProperty(DB_USERNAME_KEY) + "Pass(" + props.getProperty(DB_PASSWORD_KEY) + ")");
                    new com.school.dao.Handler().createDatabase();
                    t.setMessage("Impoting Modules");
                    com.school.dao.Handler.importModules();
                    t.setMessage("Done..");
                    UserJFrame frame = new UserJFrame(new UserPrivilege(null, null, new Module(UserJFrame.class.getName()), true, true, true, true, ""));
                    frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
                    frame.setVisible(true);
                    t.terminate();
                    setVisible(false);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error occured Saving File" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace(System.err);
                    System.exit(-1);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Error occured During Importing\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace(System.err);
                    System.exit(-1);
                }
            }
        }.start();



    }//GEN-LAST:event_buttonNextActionPerformed

    /**
     * Set configuration values in text fields.
     */
    private void setPropsInField() {
        if (props == null) {
            textFieldDriver.setText(com.school.dao.Handler.DB_DRIVER);
            textFieldPassword.setText(com.school.dao.Handler.DB_PASSWORD);
            textFieldURL.setText(com.school.dao.Handler.DB_URL);
            textFieldUsername.setText(com.school.dao.Handler.DB_USERNAME);
        } else {
            textFieldDriver.setText((String) props.get(com.school.dao.Handler.DB_DRIVER_KEY));
            textFieldPassword.setText((String) props.get(com.school.dao.Handler.DB_PASSWORD_KEY));
            textFieldURL.setText((String) props.get(com.school.dao.Handler.DB_URL_KEY));
            textFieldUsername.setText((String) props.get(com.school.dao.Handler.DB_USERNAME_KEY));
        }

    }

    /**
     * Saves configuration values in file (conf.props).
     *
     * @throws IOException
     */
    private void saveProps() throws IOException {
        com.school.dao.Handler.createPropsFile(textFieldURL.getText(), textFieldUsername.getText(), textFieldPassword.getText(), textFieldDriver.getText());
        props.setProperty(DB_DRIVER_KEY, textFieldDriver.getText());
        props.setProperty(DB_URL_KEY, textFieldURL.getText());
        props.setProperty(DB_USERNAME_KEY, textFieldUsername.getText());
        props.setProperty(DB_PASSWORD_KEY, textFieldPassword.getText());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel labelProcessing;
    private javax.swing.JTextField textFieldDriver;
    private javax.swing.JTextField textFieldPassword;
    private javax.swing.JTextField textFieldURL;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables

    /**
     * Shows the processing
     */
    private class ProcessingThread extends Thread {

        String msg;
        boolean start = true;
        int i = 0;

        ProcessingThread(String m) {
            msg = m;
            System.out.println(m);
        }

        @Override
        public void run() {
            try {
                while (start) {
                    i++;
                    if (i == 1) {
                        labelProcessing.setText(msg + ".");
                    } else if (i == 2) {
                        labelProcessing.setText(msg + "..");
                    } else if (i == 3) {
                        labelProcessing.setText(msg + "...");
                    } else {
                        i = 0;
                    }
                    Thread.sleep(500);
                }
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }

        public void terminate() {
            start = false;
        }

        public void setMessage(String m) {
            msg = m;
            System.out.println(m);
        }
    }
}
