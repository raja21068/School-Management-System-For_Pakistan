/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.FeesDiscount;
import com.school.model.Months;
import com.school.model.SchoolConfig;
import com.school.model.Section;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.constant.Configuration;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.model.Awards;
import com.school.model.Event;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.SimpleExpression;
import com.school.report.bean.AccountSummaryReportBean;
import com.school.report.bean.AttendenceReportBean;
import com.school.report.bean.ClassReportBean;
import com.school.report.bean.EventReportBean;
import com.school.report.bean.StudentReportBean;
import com.school.utils.ComponentHandler;
import com.school.utils.MyYear;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Set;

/**
 * This is Reports frame:
 * <ul>
 * <li>Stud</li>
 * </ul>
 *
 * @author JAY KUMAR
 */
public class ReportsJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReportsJFrame
     */
    SchoolConfig nameConfig = null;
    UserPrivilege privilege = null;
    private static final String DISCOUNTED = "Discounted";

    public ReportsJFrame(UserPrivilege privilege) {
        initComponents();
        this.privilege = privilege;
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if (!b) {
            return;
        }
        new Thread() {
            public void run() {
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setBatch(comboBoxBatch);
                ComponentHandler.setSection(comboBoxSection);
                comboBoxSection.addItem("---ALL---");
                comboBoxSectionItemStateChanged(null);
                ComponentHandler.setYear(comboBoxYearFrom);
                ComponentHandler.setYear(comboBoxYearTo);
                ComponentHandler.setMonth(comboBoxYearFrom, comboBoxMonthFrom);
                ComponentHandler.setMonth(comboBoxYearTo, comboBoxMonthTo);
                getSchoolConfig();
                setMaxGr();
                setMinGr();
                comboBoxBatchItemStateChanged(null);
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxYearFrom = new javax.swing.JComboBox();
        comboBoxMonthFrom = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        comboBoxYearTo = new javax.swing.JComboBox();
        comboBoxMonthTo = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxCampus = new javax.swing.JComboBox();
        jLabel = new javax.swing.JLabel();
        comboBoxBatch = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboBoxSection = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        comboBoxClass = new javax.swing.JComboBox();
        buttonPrintStudents = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        comboBoxEvents = new javax.swing.JComboBox();
        buttonPrintEvents = new javax.swing.JButton();
        checkBox1Month = new javax.swing.JCheckBox();
        checkBox2Month = new javax.swing.JCheckBox();
        checkBoxDiscounted = new javax.swing.JCheckBox();
        buttonPrintRepeat = new javax.swing.JButton();
        buttonPrintContacts = new javax.swing.JButton();
        checkBoxLeftStudents = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textFieldGrFrom = new javax.swing.JTextField();
        textFieldGrTo = new javax.swing.JTextField();
        buttonPrintByGr = new javax.swing.JButton();
        buttonPrintAttendence = new javax.swing.JButton();
        buttonCheckAndBalance = new javax.swing.JButton();
        buttonPrintLeftStudent = new javax.swing.JButton();

        setTitle("REPORTS");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))).getImage());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Current Students", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Attendence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("FROM");

        comboBoxYearFrom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYearFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearFromItemStateChanged(evt);
            }
        });

        comboBoxMonthFrom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("TO");

        comboBoxYearTo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYearTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearToItemStateChanged(evt);
            }
        });

        comboBoxMonthTo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxYearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxYearTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxMonthTo, 0, 127, Short.MAX_VALUE)
                    .addComponent(comboBoxMonthFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxYearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMonthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboBoxYearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMonthTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Campus");

        comboBoxCampus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel.setText("Session");

        comboBoxBatch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Section");

        comboBoxSection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Class");

        buttonPrintStudents.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintStudents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintStudents.setText("Print");
        buttonPrintStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintStudentsActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Events");

        buttonPrintEvents.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintEvents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintEvents.setText("Events");
        buttonPrintEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintEventsActionPerformed(evt);
            }
        });

        checkBox1Month.setSelected(true);
        checkBox1Month.setText("1 Month");

        checkBox2Month.setSelected(true);
        checkBox2Month.setText("2 Month");

        checkBoxDiscounted.setText("Discounted / Fixed");

        buttonPrintRepeat.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintRepeat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintRepeat.setText("Repeat");
        buttonPrintRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintRepeatActionPerformed(evt);
            }
        });

        buttonPrintContacts.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintContacts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintContacts.setText("Contacts");
        buttonPrintContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintContactsActionPerformed(evt);
            }
        });

        checkBoxLeftStudents.setText("Left");
        checkBoxLeftStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxLeftStudentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(buttonPrintStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPrintRepeat)
                        .addGap(7, 7, 7)
                        .addComponent(buttonPrintContacts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPrintEvents))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxSection, 0, 134, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxBatch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(checkBox2Month)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxLeftStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(checkBox1Month)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxDiscounted)))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonPrintContacts, buttonPrintEvents, buttonPrintRepeat, buttonPrintStudents});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel)
                    .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9)
                    .addComponent(comboBoxEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox1Month)
                    .addComponent(checkBoxDiscounted))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkBoxLeftStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBox2Month, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrintStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPrintEvents)
                    .addComponent(buttonPrintRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPrintContacts, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Gr#");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("From");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("To");

        buttonPrintByGr.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintByGr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintByGr.setText("Print");
        buttonPrintByGr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintByGrActionPerformed(evt);
            }
        });

        buttonPrintAttendence.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintAttendence.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintAttendence.setText("Print Attendence");
        buttonPrintAttendence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintAttendenceActionPerformed(evt);
            }
        });

        buttonCheckAndBalance.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonCheckAndBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/justice-balance-icon.png"))); // NOI18N
        buttonCheckAndBalance.setText("Account Summary");
        buttonCheckAndBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckAndBalanceActionPerformed(evt);
            }
        });

        buttonPrintLeftStudent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        buttonPrintLeftStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintLeftStudent.setText("Left Std");
        buttonPrintLeftStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintLeftStudentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonPrintAttendence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonCheckAndBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPrintByGr, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldGrTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(textFieldGrFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonPrintLeftStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(textFieldGrFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textFieldGrTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPrintByGr, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonPrintLeftStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonPrintAttendence, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCheckAndBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        Object ob = comboBoxSection.getSelectedItem();
        if (ob == null) {
            return;
        }
        if (ob instanceof Section) {
            Section sec = (Section) ob;
            try {
                comboBoxClass.setModel(new DefaultComboBoxModel(ComponentHandler.getClasses(sec).toArray()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
                ex.printStackTrace(System.err);
            }
        } else if (ob instanceof String) {
            try {
                List list = DatabaseManager.getData(Classes.class, Order.asc("sequenceNo"));
                comboBoxClass.setModel(new DefaultComboBoxModel(list.toArray()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
                ex.printStackTrace(System.err);
            }
        }
        comboBoxClass.addItem("---ALL---");
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void comboBoxBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchItemStateChanged
        MyYear mybatch = (MyYear) comboBoxBatch.getSelectedItem();
        if (mybatch == null) {
            return;
        }
        Years batch = mybatch.getYears();

        try {
            Object[] events = DatabaseQueryExecuter.getEvents(batch).toArray();
            comboBoxEvents.setModel(new DefaultComboBoxModel(events));
            comboBoxEvents.addItem("--All--");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_comboBoxBatchItemStateChanged

    private void comboBoxYearFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearFromItemStateChanged
    }//GEN-LAST:event_comboBoxYearFromItemStateChanged

    private void comboBoxYearToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearToItemStateChanged
    }//GEN-LAST:event_comboBoxYearToItemStateChanged

    private void buttonPrintStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintStudentsActionPerformed
        try {
            Object ob = comboBoxClass.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            Years batch = (Years) comboBoxBatch.getSelectedItem();
            if (ob == null || camp == null || batch == null) {
                return;
            }
            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");

            params.put("today", sdf.format(new Date()));
            params.put("SUB_REPORT", "/report/Students.jasper");
            String reportDesc = "";
            ArrayList paretnList = new ArrayList();
            if (ob instanceof String) {
                int items = comboBoxClass.getItemCount() - 1;
                for (int i = 0; i < items; i++) {
                    Classes clas = (Classes) comboBoxClass.getItemAt(i);
                    reportDesc = addReportBeansToList(camp, batch, clas, paretnList);
                }
            } else if (ob instanceof Classes) {
                Classes clas = (Classes) ob;
                reportDesc = addReportBeansToList(camp, batch, clas, paretnList);
            }
            params.put("REPORT_TYPE", reportDesc);
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(paretnList);
            InputStream report = getClass().getResource("/report/ClassStudents.jasper").openStream();

            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintStudentsActionPerformed

    private void buttonPrintByGrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintByGrActionPerformed
        printStudentGrLimit();
    }//GEN-LAST:event_buttonPrintByGrActionPerformed

    private void buttonPrintAttendenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintAttendenceActionPerformed
        try {
            Object ob = comboBoxClass.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            Years batch = (Years) comboBoxBatch.getSelectedItem();
            Months monthsFrom = (Months) comboBoxMonthFrom.getSelectedItem();
            Months monthsTo = (Months) comboBoxMonthTo.getSelectedItem();
            if (ob == null || camp == null || batch == null) {
                return;
            }
            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");

            params.put("today", sdf.format(new Date()));
            if (monthsFrom.getMonthId() != monthsTo.getMonthId()) {
                params.put("monthRange", "" + monthsFrom.getMonthName() + "(" + monthsFrom.getYears().getYearName() + ")-" + monthsTo.getMonthName() + "(" + monthsTo.getYears().getYearName() + ")");
            } else {
                params.put("monthRange", "" + monthsFrom.getMonthName() + "(" + monthsFrom.getYears().getYearName() + ")");
            }
            params.put("school", nameConfig != null ? camp + nameConfig.getValueName() : camp);

            ArrayList paretnList = new ArrayList();
            if (ob instanceof String) {
                int items = comboBoxClass.getItemCount() - 1;
                for (int i = 0; i < items; i++) {
                    Classes clas = (Classes) comboBoxClass.getItemAt(i);
                    addAttenceBeansToList(camp, batch, clas, monthsFrom, monthsTo, paretnList);
                }
            } else if (ob instanceof Classes) {
                Classes clas = (Classes) ob;
                addAttenceBeansToList(camp, batch, clas, monthsFrom, monthsTo, paretnList);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(paretnList);
            InputStream report = (getClass().getResource("/report/ClassStudentsAttendence.jasper").openStream());

            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "GR FROM is not a number");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintAttendenceActionPerformed

    private void buttonCheckAndBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckAndBalanceActionPerformed
        try {
            Months monthsFrom = (Months) comboBoxMonthFrom.getSelectedItem();
            Months monthsTo = (Months) comboBoxMonthTo.getSelectedItem();
            if (monthsTo == null || monthsFrom == null) {
                return;
            }
            Iterator<Object[]> iter = DatabaseQueryExecuter.getEmployeeExpense(monthsFrom, monthsTo).iterator();
            ArrayList list = new ArrayList();
            while (iter.hasNext()) {
                Object[] object = iter.next();
                AccountSummaryReportBean bean = new AccountSummaryReportBean();
                bean.setName((String) object[0]);
                bean.setAmount((int) ((long) object[1]));
                list.add(bean);
            }
            Iterator<Object> iterStd = DatabaseQueryExecuter.getStudentTotalArrears(monthsFrom, monthsTo).iterator();
            while (iterStd.hasNext()) {
                try {
                    Object object = iterStd.next();
                    AccountSummaryReportBean bean = new AccountSummaryReportBean();
                    bean.setName("Student Arrears");
                    bean.setAmount((int) ((long) object));
                    list.add(bean);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Student Arears are not available");
                    ex.printStackTrace(System.err);
                }
            }
            iterStd = DatabaseQueryExecuter.getStudentTotalPaid(monthsFrom, monthsTo).iterator();
            while (iterStd.hasNext()) {
                try {
                    Object object = iterStd.next();
                    AccountSummaryReportBean bean = new AccountSummaryReportBean();
                    bean.setName("Student Paid");
                    bean.setAmount((int) ((long) object));
                    list.add(bean);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Student Payments are not available");
                    ex.printStackTrace(System.err);
                }
            }
            if (list.size() < 1) {
                JOptionPane.showMessageDialog(this, "No record found..!");
                return;
            }
            Map<String, Object> params = new HashMap();
            if (monthsFrom.getMonthId() != monthsTo.getMonthId()) {
                params.put("monthRange", "" + monthsFrom.getMonthName() + "(" + monthsFrom.getYears().getYearName() + ")-" + monthsTo.getMonthName() + "(" + monthsTo.getYears().getYearName() + ")");
            } else {
                params.put("monthRange", "" + monthsFrom.getMonthName() + "(" + monthsFrom.getYears().getYearName() + ")");
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(list);
            InputStream report = (getClass().getResource("/report/AccountSummary.jasper").openStream());
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured Printing");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonCheckAndBalanceActionPerformed

    private void buttonPrintEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintEventsActionPerformed
        MyYear mybatch = (MyYear) comboBoxBatch.getSelectedItem();
        if (mybatch == null) {
            return;
        }
        Object ob = comboBoxEvents.getSelectedItem();
        if (ob == null) {
            JOptionPane.showMessageDialog(this, "No events..");
        }
        try {
            Set<EventReportBean> eventReportSet = new HashSet<>();
            if (ob instanceof String) {
                int items = comboBoxEvents.getItemCount() - 1;
                for (int i = 0; i < items; i++) {
                    com.school.model.Event event = (com.school.model.Event) comboBoxEvents.getItemAt(i);
                    EventReportBean eventBean = getEventReportBean(event, mybatch);
                    eventReportSet.add(eventBean);
                }
            } else if (ob instanceof Event) {
                com.school.model.Event event = (com.school.model.Event) comboBoxEvents.getSelectedItem();
                EventReportBean eventBean = getEventReportBean(event, mybatch);
                eventReportSet.add(eventBean);
            }
            Map<String, Object> params = new HashMap();
            
            params.put("SUB_REPORT", "/report/EventsYearlySubReportStudent.jasper");
            JRBeanCollectionDataSource ds = new net.sf.jasperreports.engine.data.JRBeanCollectionDataSource(eventReportSet);
            InputStream report = (getClass().getResource("/report/EventsYearly.jasper").openStream());
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }

    }//GEN-LAST:event_buttonPrintEventsActionPerformed

    private void buttonPrintLeftStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintLeftStudentActionPerformed
        try {
            java.util.Collection s = null;
            List<Student> list = DatabaseQueryExecuter.getLeftStudents();

            Map<String, Object> params = new HashMap<>();
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(list);
            InputStream report = (getClass().getResource("/report/StudentsLeft.jasper").openStream());
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured printing\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintLeftStudentActionPerformed

    private void buttonPrintContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintContactsActionPerformed
        try {
            Object ob = comboBoxClass.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            Years batch = (Years) comboBoxBatch.getSelectedItem();
            if (ob == null || camp == null || batch == null) {
                return;
            }
            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");

            params.put("SUB_REPORT", "/report/ClassStudentsContactsSubReport.jasper");
            params.put("today", sdf.format(new Date()));
            params.put("school", nameConfig != null ? camp + nameConfig.getValueName() : camp);
            String reportDesc = "";
            // Only className and StudentClassRegs are used in this report
            ArrayList<ClassReportBean> paretnList = new ArrayList();
            if (ob instanceof String) {
                int items = comboBoxClass.getItemCount() - 1;
                for (int i = 0; i < items; i++) {
                    Classes clas = (Classes) comboBoxClass.getItemAt(i);
                    reportDesc = addClassRegForContact(camp, batch, clas, paretnList);
                }
            } else if (ob instanceof Classes) {
                Classes clas = (Classes) ob;
                reportDesc = addClassRegForContact(camp, batch, clas, paretnList);
            }
            params.put("REPORT_TYPE", reportDesc);
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(paretnList);
            InputStream report = (getClass().getResource("/report/ClassStudents.jasper").openStream());

            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintContactsActionPerformed

    private void buttonPrintRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintRepeatActionPerformed
        try {
            Years batch = (Years) comboBoxBatch.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            List<StudentReportBean> regs = DatabaseQueryExecuter.getRepeatedStudents(batch, camp);
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(regs);
            InputStream report = (getClass().getResource("/report/StudentsRepeated.jasper").openStream());
            JasperPrint print = JasperFillManager.fillReport(report, null, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintRepeatActionPerformed

    private void checkBoxLeftStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxLeftStudentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxLeftStudentsActionPerformed
    private String addReportBeansToList(Campus camp, Years batch, Classes clas, ArrayList paretnList) {
        SimpleExpression expr = null;

//        Criteria stclRegs = DatabaseManager.session.createCriteria(StudentClassReg.class, "scr")
//                .createCriteria("scr.years", "y").add(Restrictions.eq("y.yearId", batch.getYearId()))
//                .createCriteria("scr.campus", "camp").add(Restrictions.eq("camp.campusId", camp.getCampusId()))
//                .createCriteria("scr.classes", "cl").add(Restrictions.eq("cl.classId", clas.getClassId()))
//                .createCriteria("scr.student", "st").addOrder(Order.asc("st.studentName"));
//        if(checkBoxLeftStudents.isSelected()){
//            stclRegs.add(Restrictions.eq("scr.isLeaved", constant.StudentClassRegContant.LEAVED));
//        }else{
//            stclRegs.add(Restrictions.eq("scr.isLeaved", constant.StudentClassRegContant.NOT_LEAVED));
//        }

        String reportType = "";
        if (checkBox1Month.isSelected() && checkBox2Month.isSelected()) {
            reportType = "ALL";
        } else if (checkBox1Month.isSelected()) {
            expr = Restrictions.eq("st.oneMonth", true);
            reportType = "ONE MONTH STUDENTS";
        } else if (checkBox2Month.isSelected()) {
            expr = Restrictions.eq("st.oneMonth", false);
            reportType = "TWO MONTH STUDENTS";
        }

        if (checkBoxDiscounted.isSelected()) {
            reportType = DISCOUNTED;
        }

        List stcList = DatabaseQueryExecuter.getStudentClassRegs(batch.getYearId(), camp.getCampusId(), clas.getClassId(), checkBoxLeftStudents.isSelected(), expr);

        ClassReportBean parent = new ClassReportBean();
        parent.setClassName(clas.getClassName());
        ArrayList list = new ArrayList();

        Iterator<StudentClassReg> it = stcList.iterator();
        while (it.hasNext()) {
            StudentClassReg studentClassReg = it.next();
            Student student = studentClassReg.getStudent();
            StudentReportBean child = new StudentReportBean();
            child.setRemarks(student.getRemarks());
            if (checkBoxDiscounted.isSelected()) {
                List<FeesDiscount> feesDiscounts = DatabaseQueryExecuter.getFeesDiscounts(student);
                if (feesDiscounts.isEmpty()) {
                    continue;
                }
                com.school.model.FeesDiscount disc = (FeesDiscount) feesDiscounts.get(0);
                if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES && disc.getFixedAmount().intValue() == 0) {
                    child.setRemarks("FREE");
                } else if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES) {
                    child.setRemarks(disc.getFixedAmount() + "/ Fix");
                } else if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.NOT_FIXED_FEES && disc.getDiscountAmount().intValue() > 0) {
                    child.setRemarks(disc.getDiscountAmount() + "/ Discount");
                } else {
                    continue;
                }
            }
            child.setGrNo("" + student.getGrNo());
            child.setStudentName(student.getStudentName());
            child.setFatherName(student.getFatherName());
            child.setSurname(studentClassReg.getStudent().getSurname());
            child.setDateOfAddmission(student.getDateOfAddmission());
            child.setDateOfLeaving(student.getDateOfLeaving());
            list.add(child);
        }
        parent.setStudents(list);
        paretnList.add(parent);
        return reportType;
    }

    private void addAttenceBeansToList(Campus camp, Years batch, Classes clas, Months monthFrom, Months monthTo, ArrayList parentList) {
        List<Object[]> listscr = DatabaseQueryExecuter.getStudentClassRegs(batch.getYearId(), camp.getCampusId(), clas.getClassId(), monthFrom, monthTo);
        ClassReportBean parent = new ClassReportBean();
        parent.setClassName(clas.getClassName());
        ArrayList list = new ArrayList();
        for (int i=0;i<listscr.size();i++) {
            Object[] objects = listscr.get(i);
            AttendenceReportBean bean = new AttendenceReportBean();
            bean.setPresentDays((Integer) objects[0]);
            bean.setTotalDays((Integer) objects[1]);
            String studentName = (String) objects[2];
            String fatherName = (String) objects[3];
            Integer grNo = (Integer) objects[4];

            bean.setGrNo(grNo);
            bean.setFatherName(fatherName);
            bean.setStudentName(studentName);
            list.add(bean);
        }
        parent.setAttendence(list);
        parentList.add(parent);
    }

    private void getSchoolConfig() {
        try {
            List list = DatabaseManager.getData(SchoolConfig.class, Restrictions.like("keyName", Configuration.SCHOOL));
            if (list.size() > 0) {
                nameConfig = (SchoolConfig) list.get(0);
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void setMaxGr() {
        try {
            List list = DatabaseManager.getData(com.school.model.Student.class, Projections.max("grNo"));
            if (!list.isEmpty()) {
                int max = (Integer) list.get(0);
                textFieldGrTo.setText("" + max);
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void setMinGr() {
        try {
            List list = DatabaseManager.getData(com.school.model.Student.class, Projections.min("grNo"));
            if (!list.isEmpty()) {
                int max = (Integer) list.get(0);
                textFieldGrFrom.setText("" + max);

            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void printStudentGrLimit() {
        try {
            int from, to;
            try {
                from = Integer.parseInt(textFieldGrFrom.getText().trim());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "GR FROM is not a number");
                return;
            }
            try {
                to = Integer.parseInt(textFieldGrTo.getText().trim());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "GR TO is not a number");
                return;
            }
            Map<String, Object> params = new HashMap();
            List<com.school.model.Student> list = null;
            if (checkBox1Month.isSelected() && checkBox2Month.isSelected()) {
                list = DatabaseQueryExecuter.getStudents(from, to);
            } else if (checkBox1Month.isSelected()) {
                list = DatabaseQueryExecuter.getStudents(from, to, true);
            } else if (checkBox2Month.isSelected()) {
                list = DatabaseQueryExecuter.getStudents(from, to, false);
            }

            JRBeanCollectionDataSource ds = null;
            if (checkBoxDiscounted.isSelected()) {
                ArrayList<com.school.model.Student> students = new ArrayList();
                Iterator<com.school.model.Student> it = list.iterator();
                while (it.hasNext()) {
                    Student student = it.next();
                    Object[] discounts = student.getFeesDiscounts().toArray();
                    if (discounts.length < 1) {
                        continue;
                    }
                    com.school.model.FeesDiscount disc = (FeesDiscount) discounts[0];
                    if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES && disc.getFixedAmount().intValue() == 0) {
                        student.setRemarks("FREE");
                    } else if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES) {
                        student.setRemarks(disc.getFixedAmount() + "/ Fix");
                    } else if (disc.getIsFixed().intValue() == com.school.constant.FeesPayment.NOT_FIXED_FEES && disc.getDiscountAmount().intValue() > 0) {
                        student.setRemarks(disc.getDiscountAmount() + "/ Discount");
                    } else {
                        continue;
                    }
                    students.add(student);
                }
                System.out.println("Students:" + students.size());
                ds = new JRBeanCollectionDataSource(students);
            } else {
                ds = new JRBeanCollectionDataSource(list);
            }
            InputStream report = (getClass().getResource("/report/StudentInfo.jasper").openStream());

            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured printing\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCheckAndBalance;
    private javax.swing.JButton buttonPrintAttendence;
    private javax.swing.JButton buttonPrintByGr;
    private javax.swing.JButton buttonPrintContacts;
    private javax.swing.JButton buttonPrintEvents;
    private javax.swing.JButton buttonPrintLeftStudent;
    private javax.swing.JButton buttonPrintRepeat;
    private javax.swing.JButton buttonPrintStudents;
    private javax.swing.JCheckBox checkBox1Month;
    private javax.swing.JCheckBox checkBox2Month;
    private javax.swing.JCheckBox checkBoxDiscounted;
    private javax.swing.JCheckBox checkBoxLeftStudents;
    private javax.swing.JComboBox comboBoxBatch;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxClass;
    private javax.swing.JComboBox comboBoxEvents;
    private javax.swing.JComboBox comboBoxMonthFrom;
    private javax.swing.JComboBox comboBoxMonthTo;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JComboBox comboBoxYearFrom;
    private javax.swing.JComboBox comboBoxYearTo;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField textFieldGrFrom;
    private javax.swing.JTextField textFieldGrTo;
    // End of variables declaration//GEN-END:variables

    private String addClassRegForContact(Campus camp, Years batch, Classes clas, ArrayList<ClassReportBean> paretnList) {
//        Criteria stclRegs = DatabaseManager.session.createCriteria(StudentClassReg.class, "scr")
//                .createCriteria("scr.years", "y").add(Restrictions.eq("y.yearId", batch.getYearId()))
//                .createCriteria("scr.campus", "camp").add(Restrictions.eq("camp.campusId", camp.getCampusId()))
//                .createCriteria("scr.classes", "cl").add(Restrictions.eq("cl.classId", clas.getClassId()))
//                .createCriteria("scr.student", "st")
//                .add(Restrictions.eq("scr.isLeaved", checkBoxLeftStudents.isSelected()?constant.StudentClassRegContant.LEAVED : constant.StudentClassRegContant.NOT_LEAVED))
//                .addOrder(Order.asc("st.studentName"));
        String reportType = "";
        SimpleExpression expr = null;
        if (checkBox1Month.isSelected() && checkBox2Month.isSelected()) {
            reportType = "ALL STUDENT CONTACTS";
        } else if (checkBox1Month.isSelected()) {
            expr = Restrictions.eq("oneMonth", true);
            reportType = "ONE MONTH STUDENTS CONTACT";
        } else if (checkBox2Month.isSelected()) {
            expr = Restrictions.eq("oneMonth", false);
            reportType = "TWO MONTH STUDENTS CONTACT";
        }

        List<Student> stdsList = DatabaseQueryExecuter.getStudentClassRegsWithStudent(batch.getYearId(), camp.getCampusId(), clas.getClassId(), checkBoxLeftStudents.isSelected() ? com.school.constant.StudentClassRegContant.LEAVED : com.school.constant.StudentClassRegContant.NOT_LEAVED, expr);

        ClassReportBean classReport = new ClassReportBean();
        classReport.setClassName(clas.getClassName());
        List<StudentReportBean> studentReportBeanList = new ArrayList<>();
        for (int i = 0; i < stdsList.size(); i++) {
            Student st = stdsList.get(i);
            StudentReportBean bean = new StudentReportBean();
            bean.setContact(st.getContactNo());
            bean.setStudentName(st.getStudentName());
            bean.setFatherName(st.getFatherName());
            bean.setGrNo("" + st.getGrNo());
            studentReportBeanList.add(bean);
        }
        classReport.setStudents(studentReportBeanList);
        paretnList.add(classReport);
        return reportType;
    }

    private EventReportBean getEventReportBean(Event event, Years mybatch) {
        EventReportBean eventBean = new EventReportBean();
        eventBean.setDay(event.getDay());
        eventBean.setYears(mybatch.getYearName());
        eventBean.setDesciption(event.getDesciption());
        List<Awards> setAward = DatabaseQueryExecuter.getAwards(event);
        Set<StudentReportBean> setStudent = new HashSet<>();
        for (int j = 0; j < setAward.size(); j++) {
            Awards award = setAward.get(j);
            Student st = award.getStudent();
            StudentReportBean studentBean = new StudentReportBean();
            studentBean.setStudentName(st.getStudentName());
            studentBean.setFatherName(st.getFatherName());
            studentBean.setGrNo("" + st.getGrNo());
            studentBean.setAwardsName(award.getAwardsName());
            studentBean.setPostion(award.getPostion());
            setStudent.add(studentBean);
        }
        eventBean.setStudents(setStudent);
        return eventBean;

    }
}
