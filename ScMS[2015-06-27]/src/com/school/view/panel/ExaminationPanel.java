/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view.panel;

import com.school.constant.ConsSubject;
import com.school.constant.D_Msg;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.log.AppLog;
import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.ExamResult;
import com.school.model.ExamType;
import com.school.model.Section;
import com.school.model.StudentClassReg;
import com.school.model.Subjects;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.utils.AppMsg;
import com.school.utils.ComponentHandler;
import com.school.utils.jtable.sort.JTableJKSort;
import com.school.view.JkPanel;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterJob;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.hibernate.criterion.Order;

/**
 *
 * @author JAY
 */
public class ExaminationPanel extends  JkPanel{

    private ArrayList subjects = null;
    private final int STUDENT_CLASS_REG_COL = 3;
    private final int SELECT_COL = 0;
    int listClassIndex = -1;
    int listTypeIndex = -1;
    private Object firstColumnBoolean = "";
    
    /**
     * Creates new form ExaminationPanel
     */
    public ExaminationPanel(UserPrivilege privilege) {
        super(privilege);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenuStudent = new javax.swing.JPopupMenu();
        menuItemSelectAllCheck = new javax.swing.JMenuItem();
        menuItemUnckeck = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxCampus = new javax.swing.JComboBox();
        jLabel = new javax.swing.JLabel();
        comboBoxBatch = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboBoxSection = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        listClass = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        listExamType = new javax.swing.JList();
        buttonPrintMarksheets = new javax.swing.JButton();
        checkBoxIncludeLeaved = new javax.swing.JCheckBox();
        checkBoxCurrentSubject = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        buttonSave = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        menuItemSelectAllCheck.setText("Check All");
        menuItemSelectAllCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSelectAllCheckActionPerformed(evt);
            }
        });
        popupMenuStudent.add(menuItemSelectAllCheck);

        menuItemUnckeck.setText("Uncheck All");
        menuItemUnckeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUnckeckActionPerformed(evt);
            }
        });
        popupMenuStudent.add(menuItemUnckeck);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EXAMINATION");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Campus");

        comboBoxCampus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel.setText("Session");

        comboBoxBatch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Section");

        comboBoxSection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Class", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        listClass.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        listClass.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listClassValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listClass);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exam Type", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));

        listExamType.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        listExamType.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listExamType.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listExamTypeValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listExamType);

        buttonPrintMarksheets.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintMarksheets.setText("Print Sheet");
        buttonPrintMarksheets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintMarksheetsActionPerformed(evt);
            }
        });

        checkBoxIncludeLeaved.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxIncludeLeaved.setText("INCLUDE LEAVED");
        checkBoxIncludeLeaved.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkBoxIncludeLeaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIncludeLeavedActionPerformed(evt);
            }
        });

        checkBoxCurrentSubject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxCurrentSubject.setSelected(true);
        checkBoxCurrentSubject.setText("Show Current Subjects");
        checkBoxCurrentSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCurrentSubjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonPrintMarksheets)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxIncludeLeaved)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxCurrentSubject, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxCampus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel)
                            .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPrintMarksheets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(checkBoxIncludeLeaved)
                                    .addComponent(checkBoxCurrentSubject))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "ST. Name", "Father", "Class"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStudents.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableStudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableStudents);

        buttonSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-document-save-icon.png"))); // NOI18N
        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("Press Enter after changing in cell");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemSelectAllCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSelectAllCheckActionPerformed
        setAllCheckInTableStudent(true);
    }//GEN-LAST:event_menuItemSelectAllCheckActionPerformed

    private void menuItemUnckeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUnckeckActionPerformed
        setAllCheckInTableStudent(false);
    }//GEN-LAST:event_menuItemUnckeckActionPerformed

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
        refreshStudents();
        refreshExamResults();
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void comboBoxBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchItemStateChanged
        refreshStudents();
        refreshExamResults();
    }//GEN-LAST:event_comboBoxBatchItemStateChanged

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        setClass();
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void listClassValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listClassValueChanged
        int index = listClass.getSelectedIndex();
        if (index == listClassIndex) {
            return;
        }
        refreshStudents();
        refreshExamResults();
        listClassIndex = index;
    }//GEN-LAST:event_listClassValueChanged

    private void listExamTypeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listExamTypeValueChanged
        refreshStudents();
        refreshExamResults();
    }//GEN-LAST:event_listExamTypeValueChanged

    private void buttonPrintMarksheetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintMarksheetsActionPerformed
        try {
            Classes cl = (Classes) listClass.getSelectedValue();
            ExamType type = (ExamType) listExamType.getSelectedValue();
            if (cl == null || type == null) {
                return;
            }
            PrinterJob job = PrinterJob.getPrinterJob();
            PageFormat pf = job.defaultPage();
            Paper paper = pf.getPaper();
            double margin = 10.;
            paper.setImageableArea(margin,
                paper.getImageableY(),
                paper.getWidth() - 2 * margin, paper.getImageableHeight());
            pf.setPaper(paper);
            MessageFormat header = new MessageFormat(cl.getClassName() + " - " + type.getExamName());
            MessageFormat footer = new MessageFormat("Page{0,number,integer}");
            job.setPrintable(tableStudents.getPrintable(JTable.PrintMode.FIT_WIDTH, header, footer),
                job.validatePage(pf));
            if (job.printDialog()) {
                job.print();
            }
            //tableStudents.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
            AppMsg.error(this,D_Msg.MSG_6 ,ex);
        }
    }//GEN-LAST:event_buttonPrintMarksheetsActionPerformed

    private void checkBoxIncludeLeavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIncludeLeavedActionPerformed
        refreshStudents();
        refreshExamResults();
    }//GEN-LAST:event_checkBoxIncludeLeavedActionPerformed

    private void checkBoxCurrentSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCurrentSubjectActionPerformed
        refreshStudents();
        refreshExamResults();
    }//GEN-LAST:event_checkBoxCurrentSubjectActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableStudents.getModel();

        ExamType type = (ExamType) listExamType.getSelectedValue();
        Classes clas = (Classes) listClass.getSelectedValue();
        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years year = (Years) comboBoxBatch.getSelectedItem();
        if (clas == null || camp == null || type == null || year == null) {
            return;
        }
        int rows = model.getRowCount();
        for (int rNo = 0; rNo < rows; rNo++) {
            StudentClassReg reg = (StudentClassReg) model.getValueAt(rNo, STUDENT_CLASS_REG_COL);
            for (int i = 0; i < subjects.size(); i++) {
                Subjects sub = (Subjects) subjects.get(i);
                Object ob = model.getValueAt(rNo, (i + 1 + STUDENT_CLASS_REG_COL));
                if (ob == null) {

                    continue;
                }
                if (ob instanceof ExamResult) {
                } else if (ob instanceof String) {
                    List list = DatabaseManager.getData(ExamResult.class.getName(), " student_class_reg_id=" + reg.getStudentClassRegId().intValue() + " AND subject_id=" + sub.getSubjectId().intValue() + " AND exam_type_id=" + type.getExamTypeId().intValue(), " exam_result_id ");
                    if (ob.toString().isEmpty()) {
                        continue;
                    }
                    if (list.isEmpty()) {
                        try {
                            ExamResult er = new ExamResult(type, sub, reg, ConsSubject.getMarksStatus(ob.toString()));
                            DatabaseManager.addData(er);
                        } catch (Exception ex) {
                            AppMsg.error(this, D_Msg.MSG_17 + (rNo + 1) + "   column-" + (i + 1 + STUDENT_CLASS_REG_COL));
                            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
                        }
                    } else if (list.size() > 1) {
                        AppMsg.error(this, D_Msg.MSG_53+D_Msg.MSG_54);
                    } else {
                        try {
                            ExamResult er = (ExamResult) list.get(0);
                            er.setObtainMarks(ConsSubject.getMarksStatus(ob.toString()));
                            DatabaseManager.updateData(er);
                        } catch (Exception ex) {
                            AppMsg.error(this, D_Msg.MSG_17 + (rNo + 1) + "   column-" + (i + 1 + STUDENT_CLASS_REG_COL));
                            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
                        }
                    }
                } else {
                    AppMsg.error(this, D_Msg.MSG_53);
                }

            }
        }
        AppMsg.info(this, D_Msg.MSG_52);
    }//GEN-LAST:event_buttonSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPrintMarksheets;
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxCurrentSubject;
    private javax.swing.JCheckBox checkBoxIncludeLeaved;
    private javax.swing.JComboBox comboBoxBatch;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listClass;
    private javax.swing.JList listExamType;
    private javax.swing.JMenuItem menuItemSelectAllCheck;
    private javax.swing.JMenuItem menuItemUnckeck;
    private javax.swing.JPopupMenu popupMenuStudent;
    private javax.swing.JTable tableStudents;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setSection(comboBoxSection);
                setClass();
                ComponentHandler.setBatch(comboBoxBatch);
                setExamType();
                refreshStudents();
            
    }
    
    /**
     *
     * @param b - if true then select all rows in table.
     */
    private void setAllCheckInTableStudent(boolean b) {
        int totalRows = tableStudents.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            tableStudents.setValueAt(b, i, SELECT_COL);
        }
    }

    /**
     * insert all class in list according to section.
     */
    private void setClass() {
        Section sec = (Section) comboBoxSection.getSelectedItem();
        if (sec == null) {
            return;
        }
        try {
            List<Classes> clas= DatabaseQueryExecuter.getClasses(sec);
            listClass.setListData(clas.toArray());
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Insert all types / terms of examination in list.
     */
    private void setExamType() {
        try {
            listExamType.setListData(DatabaseManager.getData(ExamType.class,Order.asc("sequenceNo")).toArray());
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Insert all student in table according to selected class from list.
     */
    private void refreshStudents() {
        DefaultTableModel model = setTableModel();

        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years years = (Years) comboBoxBatch.getSelectedItem();

        if (camp == null || years == null) {
            return;
        }


        Classes cl = (Classes) listClass.getSelectedValue();
        if (cl == null) {
            return;
        }
//        Criteria stdCrit = HibernateUtil.openSession().createCriteria(Student.class);
//        if (!checkBoxIncludeLeaved.isSelected()) {
//            stdCrit.add(Restrictions.isNull("dateOfLeaving"));
//        }
        
        List list = DatabaseQueryExecuter.getStudentClassRegsOrderByStudent(years.getYearId(), camp.getCampusId(), cl.getClassId(), checkBoxIncludeLeaved.isSelected());
        
        for (Object ob : list) {
            StudentClassReg st = (StudentClassReg) ob;
            model.addRow(new Object[]{firstColumnBoolean, st.getStudent(), st.getStudent().getFatherName(), st});
        }
    }

    /**
     * insert columns of subject related to selected class , and results in row
     * of particular student.
     */
    private void refreshExamResults() {
        int totalColumn = tableStudents.getColumnCount();
        for (int i = totalColumn - 1; i > (STUDENT_CLASS_REG_COL); i--) {
            tableStudents.removeColumn(tableStudents.getColumnModel().getColumn(i));
        }

        DefaultTableModel model = (DefaultTableModel) tableStudents.getModel();

        ExamType type = (ExamType) listExamType.getSelectedValue();
        Classes clas = (Classes) listClass.getSelectedValue();
        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years year = (Years) comboBoxBatch.getSelectedItem();
        if (clas == null || camp == null || type == null || year == null) {
            return;
        }
        try {
            
            List list2 = DatabaseQueryExecuter.getSubjects(clas.getClassId(), checkBoxCurrentSubject.isSelected());

            for (int i = 0; i < list2.size(); i++) {
                model.addColumn(list2.get(i));
          

            }
            setColumnWidth();
            subjects = (ArrayList) list2;
            int rows = model.getRowCount();
            for (int rNo = 0; rNo < rows; rNo++) {
                StudentClassReg reg = (StudentClassReg) model.getValueAt(rNo, STUDENT_CLASS_REG_COL);
                for (int i = 0; i < list2.size(); i++) {
                    Subjects sub = (Subjects) list2.get(i);
                    
                    List result = DatabaseQueryExecuter.getExamResult(type.getExamTypeId(),sub.getSubjectId(),reg.getStudentClassRegId());
                    if (!result.isEmpty()) {
                        model.setValueAt(result.get(0), rNo, (STUDENT_CLASS_REG_COL + 1 + i));
                    }

                }
            }

        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * set a new table model in examination result table.
     *
     * @return
     */
    private DefaultTableModel setTableModel() {
        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "", "ST. Name", "Father", "Class"
        }) {
            @Override
            public Class getColumnClass(int columnIndex) {
                if (columnIndex == SELECT_COL) {
//                    return java.lang.Boolean.class;
                    return java.lang.Object.class;
                }
                return java.lang.Object.class;
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 1 || columnIndex == 2 || columnIndex == 3) {
                    return false;
                }
                return true;
            }
        });
        tableStudents.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableStudents.setComponentPopupMenu(popupMenuStudent);
        tableStudents.getTableHeader().setReorderingAllowed(false);
        setColumnWidth();
        JTableJKSort sort = new JTableJKSort(tableStudents);
        return (DefaultTableModel) tableStudents.getModel();
    }

    private void setColumnWidth() {
        tableStudents.getColumnModel().getColumn(0).setMinWidth(30);
        tableStudents.getColumnModel().getColumn(0).setPreferredWidth(40);
        tableStudents.getColumnModel().getColumn(0).setMaxWidth(40);
        tableStudents.getColumnModel().getColumn(1).setMinWidth(150);
        tableStudents.getColumnModel().getColumn(1).setPreferredWidth(150);
        tableStudents.getColumnModel().getColumn(2).setMinWidth(120);
        tableStudents.getColumnModel().getColumn(2).setPreferredWidth(120);
    }

    @Override
    protected void postInit() {
        ComponentHandler.setModelListener(tableStudents);
    }

    @Override
    protected void handlePrivilege() {
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonSave.setVisible(false);
        }
    }

    @Override
    protected void initComponentImplementation() {
        initComponents();
    }
}
