/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.dao;

import com.school.model.Module;
import com.school.constant.Forms;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
import javax.swing.JOptionPane;
import org.hibernate.cfg.AnnotationConfiguration;

/**
 *
 * @author JAY KUMAR
 */
/**
     * Here Properties contains database's
     * <ul>
     *  <li>Driver</li>
     *  <li>URL</li>
     *  <li>Username</li>
     *  <li>Password</li>
     * </ul>
     */
public class Handler {
    
    public static final String DATABASE_FILE_NAME = "SCHOOL.sql";
    public static final String DATABASE_NAME = "tg_school";
    public static final String DATABASE_DRIVER_KEY = "hibernate.connection.driver_class";
    public static final String DATABASE_URL_KEY = "hibernate.connection.url";
    public static final String DATABASE_USERNAME_KEY = "hibernate.connection.username";
    public static final String DATABASE_PASSWORD_KEY = "hibernate.connection.password";
    public static String DRIVER = "com.mysql.jdbc.Driver";
    public static String URL = "jdbc:mysql://localhost:3306/tg_school?zeroDateTimeBehavior=convertToNull";
    public static String USERNAME = "root";
    public static String PASSWORD = "root";
    public static final String FILE_NAME = "config.properties";

    /**
     * create the database configuration file derived from AnnotationConfiguration
     * or override the existing file, and if configuration file exist then 
     * set the properties in AnnotationConfiguration. 
     * @param conf - org.hibernate.cfg.AnnotationConfiguration from HibernateUtil
     * @return org.hibernate.cfg.AnnotationConfiguration (used in database.HibernateUtil)
     * @throws IOException
     * @throws Exception 
     */
    public static AnnotationConfiguration setProps(AnnotationConfiguration conf) throws IOException, Exception {
        Properties prop = new Properties();
        File file = new File(FILE_NAME);
        if (file.exists()) {
            InputStream input = new FileInputStream(file);
            prop.load(input);
        } else {
            //prop = createPropsFile(INIT_URL, INIT_USERNAME, INIT_PASSWORD, INIT_DRIVER);
        }
        conf.setProperty(DATABASE_DRIVER_KEY, prop.getProperty(DATABASE_DRIVER_KEY));
        conf.setProperty(DATABASE_PASSWORD_KEY, prop.getProperty(DATABASE_PASSWORD_KEY));
        conf.setProperty(DATABASE_URL_KEY, prop.getProperty(DATABASE_URL_KEY));
        conf.setProperty(DATABASE_USERNAME_KEY, prop.getProperty(DATABASE_USERNAME_KEY));

        DRIVER = prop.getProperty(DATABASE_DRIVER_KEY);
        URL = prop.getProperty(DATABASE_URL_KEY);
        USERNAME = prop.getProperty(DATABASE_USERNAME_KEY);
        PASSWORD = prop.getProperty(DATABASE_PASSWORD_KEY);
        return conf;
    }

    /**
     * 
     * @return <tt>true</tt> if configuration file exist otherwise <tt>false</tt> 
     * @throws Exception 
     */
    public static boolean isPropsExists() throws Exception {
        File f = new File(FILE_NAME);
        if (f.exists()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Prepare Properties which will be saved in configuration.props file.
     * @return Properties
     * @throws IOException 
     */
    public static Properties createDefaultPropsFile() throws IOException {
        return createPropsFile(URL, USERNAME, PASSWORD, DRIVER);
    }

    /**
     * creates the configuration.props file.
     * @param url database url (with protocol)
     * @param username database username
     * @param password database user password
     * @param driver database driver
     * @return
     * @throws IOException 
     */
    public static Properties createPropsFile(String url, String username, String password, String driver) throws IOException {
        File file = new File(FILE_NAME);
        Properties prop = new Properties();
        OutputStream output = new FileOutputStream(file);
        prop.setProperty(DATABASE_DRIVER_KEY, driver);
        prop.setProperty(DATABASE_URL_KEY, url);
        prop.setProperty(DATABASE_USERNAME_KEY, username);
        prop.setProperty(DATABASE_PASSWORD_KEY, password);
        prop.store(output, null);
        output.close();
        return prop;
    }

    /**
     * get the properties which is stored in configuration.props.
     * if file doesn't exist it will create a new one.
     * @return Properties 
     * @throws IOException 
     */
    public static Properties getDatabaseProperties() throws IOException {
        Properties prop = new Properties();
        InputStream input = new FileInputStream(FILE_NAME);
        prop.load(input);
        input.close();
        return prop;
    }

    /**
     * Import all modules in database (Modules from constant.Forms)
     * @throws Exception 
     */
    public static void importModules() throws Exception {
        String[] f = Forms.forms;
        for (String string : f) {
            DatabaseManager.addData(new Module(string,string,null));
        }
    }
    
    public Handler(){}
    
    /**
     * Import the .SQL file named in field (DATABASE_FILE_NAME)
     * @param dbUserName Database Username
     * @param dbPassword Database Paaword
     * @throws Exception 
     */
    public void importDatabaseSQLFile(String dbUserName,String dbPassword) throws Exception {
//        String path = createSQLFile();
        String path = new File(DATABASE_FILE_NAME).getAbsolutePath();
        System.err.println(path);
        String[] executeCmd = new String[]{"mysql", "--user=" + dbUserName, "--password=" + dbPassword, "-e", "source "+path};
        Process runtimeProcess;

        runtimeProcess = Runtime.getRuntime().exec(executeCmd);
        int processComplete = runtimeProcess.waitFor();

        if (processComplete == 0) {
            System.out.println("Backup created successfully");
        } else {
            System.out.println("Could not create the backup");
        }
    }

    /**
     * This method will restore the database from a backup file path.
     * @param dbUserName Database Username
     * @param dbPassword Database Paaword
     * @param source - Backup file path
     * @return <tt>true</tt> if database successfully imported otherwise <tt>false</tt>
     */
    public static boolean restoreDB(String dbUserName, String dbPassword, String source) {
        String[] executeCmd = new String[]{"mysql", "--user=" + dbUserName, "--password=" + dbPassword, "-e", "source "+source};
         
        Process runtimeProcess;
        try {
 
            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();
 
            if (processComplete == 0) {
                JOptionPane.showMessageDialog(null, "Backup restored successfully");
                System.out.println("Backup restored successfully");
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Could not restore the backup","Failed",JOptionPane.ERROR_MESSAGE);
                InputStream in =runtimeProcess.getErrorStream();
                int avaliable = in.available();
                byte[] b = new byte[avaliable];
                in.read(b);
                String str = new String(b);
                System.out.println("Could not restore the backup:"+str);
            }
        } catch (IOException | InterruptedException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, "Error Executing Commands..\n"+ex.getMessage());
            ex.printStackTrace(System.err);
        }
        return false;
    }
    
    /**
     * This method will create the backup file of current database.
     * @param dbUserName Database Username
     * @param dbPassword Database Paaword
     * @param path directory path where the dump file should save.
     * @return  <tt>true</tt> if backup file is successfully created otherwise <tt>false</tt>
     */
    public static boolean backupDB(String dbUserName, String dbPassword, String path) {
 
        String executeCmd = "mysqldump -u" + dbUserName + " -p" + dbPassword + "  -B " + DATABASE_NAME + " -r \"" + path+"\"";
        System.out.println(executeCmd);
        Process runtimeProcess;
        try {
 
            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            
            int processComplete = runtimeProcess.waitFor();
 
            if (processComplete == 0) {
                JOptionPane.showMessageDialog(null, "Backup created successfully");
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Backup creation failed..","Failed",JOptionPane.ERROR_MESSAGE);
                InputStream in =runtimeProcess.getErrorStream();
                int avaliable = in.available();
                byte[] b = new byte[avaliable];
                in.read(b);
                String str = new String(b);
                System.out.println(avaliable+" Could not create the backup:"+str);
                
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
 
        return false;
    }
    
    //    private String createSQLFile()throws Exception{
//        InputStream input = getClass().getResourceAsStream(DATABASE_FILE_NAME);
//        DataOutputStream output = new DataOutputStream(new FileOutputStream(DATABASE_FILE_NAME));
//        byte[] b = new byte[(int) input.available()];
//        input.read(b);
//        output.write(b);
//        input.close();
//        output.close();
//        return new File(DATABASE_FILE_NAME).getAbsolutePath();
//    }
}
