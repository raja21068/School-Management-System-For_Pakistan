/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view.panel;

import com.school.constant.D_Msg;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import com.school.log.AppLog;
import com.school.model.Module;
import com.school.model.TgUser;
import com.school.model.UserPrivilege;
import com.school.utils.AppMsg;
import com.school.utils.ComponentHandler;
import com.school.view.JkPanel;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.SimpleExpression;

/**
 *
 * @author JAY
 */
public class UserManagePanel extends JkPanel {

    private static final int MODULE_COL = 0;
    private static final int ACTIVE_COL = 1;
    private static final int ADD_COL = 2;
    private static final int DELETE_COL = 3;
    private static final int UPDATE_COL = 4;
    private boolean defaultCheckboxState = false;

    public UserManagePanel(UserPrivilege privilege) {
        super(privilege);
    }
    public UserManagePanel(UserPrivilege privilege, boolean defaultState) {
        super(privilege);
        this.defaultCheckboxState = defaultState;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        menuActive = new javax.swing.JMenu();
        menuItemCheckAllActive = new javax.swing.JMenuItem();
        menuItemUncheckAllActive = new javax.swing.JMenuItem();
        menuAdd = new javax.swing.JMenu();
        menuItemCheckAllAdd = new javax.swing.JMenuItem();
        menuItemUnCheckAllAdd = new javax.swing.JMenuItem();
        menuDelete = new javax.swing.JMenu();
        menuItemCheckAllDelete = new javax.swing.JMenuItem();
        menuItemUnCheckAllDelete = new javax.swing.JMenuItem();
        menuUpdate = new javax.swing.JMenu();
        menuItemCheckAllUpdate = new javax.swing.JMenuItem();
        menuItemUnCheckAllUpdate = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textFieldUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldPassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaRemarks = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        listUsers = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePrivileges = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();

        menuActive.setText("Active");

        menuItemCheckAllActive.setText("Check All");
        menuItemCheckAllActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllActiveActionPerformed(evt);
            }
        });
        menuActive.add(menuItemCheckAllActive);

        menuItemUncheckAllActive.setText("Uncheck All");
        menuItemUncheckAllActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUncheckAllActiveActionPerformed(evt);
            }
        });
        menuActive.add(menuItemUncheckAllActive);

        jPopupMenu1.add(menuActive);

        menuAdd.setText("Add");

        menuItemCheckAllAdd.setText("Check All");
        menuItemCheckAllAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllAddActionPerformed(evt);
            }
        });
        menuAdd.add(menuItemCheckAllAdd);

        menuItemUnCheckAllAdd.setText("Uncheck All");
        menuItemUnCheckAllAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUnCheckAllAddActionPerformed(evt);
            }
        });
        menuAdd.add(menuItemUnCheckAllAdd);

        jPopupMenu1.add(menuAdd);

        menuDelete.setText("Delete");

        menuItemCheckAllDelete.setText("Check All");
        menuItemCheckAllDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllDeleteActionPerformed(evt);
            }
        });
        menuDelete.add(menuItemCheckAllDelete);

        menuItemUnCheckAllDelete.setText("Uncheck All");
        menuItemUnCheckAllDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUnCheckAllDeleteActionPerformed(evt);
            }
        });
        menuDelete.add(menuItemUnCheckAllDelete);

        jPopupMenu1.add(menuDelete);

        menuUpdate.setText("Update");

        menuItemCheckAllUpdate.setText("Check All");
        menuItemCheckAllUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllUpdateActionPerformed(evt);
            }
        });
        menuUpdate.add(menuItemCheckAllUpdate);

        menuItemUnCheckAllUpdate.setText("Uncheck All");
        menuItemUnCheckAllUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUnCheckAllUpdateActionPerformed(evt);
            }
        });
        menuUpdate.add(menuItemUnCheckAllUpdate);

        jPopupMenu1.add(menuUpdate);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("USERS");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Username*");

        textFieldUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Password*");

        textFieldPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Remarks");

        textAreaRemarks.setColumns(20);
        textAreaRemarks.setRows(5);
        jScrollPane1.setViewportView(textAreaRemarks);

        listUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listUsersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listUsers);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Privileges", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial Unicode MS", 1, 12))); // NOI18N

        tablePrivileges.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.BELOW_BOTTOM));
        tablePrivileges.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Form", "Active", "Add", "Delete", "Update"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePrivileges.setComponentPopupMenu(jPopupMenu1);
        tablePrivileges.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablePrivileges);

        buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/add-icon (1).png"))); // NOI18N
        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/minus-icon.png"))); // NOI18N
        buttonDelete.setText("Delete");
        buttonDelete.setEnabled(false);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/arrow-up-icon.png"))); // NOI18N
        buttonUpdate.setText("Update");
        buttonUpdate.setEnabled(false);
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonClear.setText("Clear");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(textFieldPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemCheckAllActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllActiveActionPerformed
        setAllCheck(1, true);
    }//GEN-LAST:event_menuItemCheckAllActiveActionPerformed

    private void menuItemUncheckAllActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUncheckAllActiveActionPerformed
        setAllCheck(1, false);
    }//GEN-LAST:event_menuItemUncheckAllActiveActionPerformed

    private void menuItemCheckAllAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllAddActionPerformed
        setAllCheck(2, true);
    }//GEN-LAST:event_menuItemCheckAllAddActionPerformed

    private void menuItemUnCheckAllAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUnCheckAllAddActionPerformed
        setAllCheck(2, false);
    }//GEN-LAST:event_menuItemUnCheckAllAddActionPerformed

    private void menuItemCheckAllDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllDeleteActionPerformed
        setAllCheck(3, true);
    }//GEN-LAST:event_menuItemCheckAllDeleteActionPerformed

    private void menuItemUnCheckAllDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUnCheckAllDeleteActionPerformed
        setAllCheck(3, false);
    }//GEN-LAST:event_menuItemUnCheckAllDeleteActionPerformed

    private void menuItemCheckAllUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllUpdateActionPerformed
        setAllCheck(4, true);
    }//GEN-LAST:event_menuItemCheckAllUpdateActionPerformed

    private void menuItemUnCheckAllUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUnCheckAllUpdateActionPerformed
        setAllCheck(4, false);
    }//GEN-LAST:event_menuItemUnCheckAllUpdateActionPerformed

    private void listUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listUsersValueChanged
        if (listUsers.isSelectionEmpty()) {
            return;
        }
        buttonDelete.setEnabled(true);
        buttonUpdate.setEnabled(true);
        buttonAdd.setEnabled(false);

        try {
            TgUser user = (TgUser) listUsers.getSelectedValue();
            refreshForms(user);
            textAreaRemarks.setText(user.getRemarks());
            textFieldUsername.setText(user.getName());
            textFieldPassword.setText(user.getPassword());

        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listUsersValueChanged

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        String username = textFieldUsername.getText();
        String password = textFieldPassword.getText();
        String remarks = textAreaRemarks.getText();
        if (username.trim().isEmpty() || password.trim().isEmpty()) {
            AppMsg.warning(this, D_Msg.MSG_57);
            return;
        }
        try {
            TgUser user = new TgUser(username, password, false, remarks, null);
            int id = (Integer) DatabaseManager.addData(user);
            user.setId(id);

            int totalRows = tablePrivileges.getRowCount();
            for (int i = 0; i < totalRows; i++) {
                Module mod = (Module) tablePrivileges.getValueAt(i, MODULE_COL);
                Boolean isAdd = (Boolean) tablePrivileges.getValueAt(i, ADD_COL);
                Boolean isDel = (Boolean) tablePrivileges.getValueAt(i, DELETE_COL);
                Boolean isUpdate = (Boolean) tablePrivileges.getValueAt(i, UPDATE_COL);
                Boolean isActive = (Boolean) tablePrivileges.getValueAt(i, ACTIVE_COL);
                DatabaseManager.addData(new UserPrivilege(user, mod, isActive, isAdd, isDel, isUpdate));
            }
            refreshUsers();
        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        try {
            TgUser user = (TgUser) listUsers.getSelectedValue();
            user.setIsDeleted(true);
            DatabaseManager.updateData(user);
            refreshUsers();
            refreshForms(null);
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6, ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        String username = textFieldUsername.getText();
        String password = textFieldPassword.getText();
        String remarks = textAreaRemarks.getText();
        if (username.trim().isEmpty() || password.trim().isEmpty()) {
            AppMsg.warning(this, D_Msg.MSG_57);
            return;
        }
        try {
            TgUser user = (TgUser) listUsers.getSelectedValue();
            if (listUsers.isSelectionEmpty()) {

                return;
            }
            user.setName(username);
            user.setPassword(password);
            user.setRemarks(remarks);
            int totalRows = tablePrivileges.getRowCount();
            for (int i = 0; i < totalRows; i++) {
                UserPrivilege privilege = (UserPrivilege) tablePrivileges.getValueAt(i, MODULE_COL);
                privilege.setIsAdd((Boolean) tablePrivileges.getValueAt(i, ADD_COL));
                privilege.setIsDelete((Boolean) tablePrivileges.getValueAt(i, DELETE_COL));
                privilege.setIsUpdate((Boolean) tablePrivileges.getValueAt(i, UPDATE_COL));
                privilege.setIsActive((Boolean) tablePrivileges.getValueAt(i, ACTIVE_COL));
                try {
                    DatabaseManager.updateData(privilege);
                } catch (Exception ex) {
                    Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
                }
            }
            DatabaseManager.updateData(user);
            AppMsg.info(this, D_Msg.MSG_24);
        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        textAreaRemarks.setText("");
        textFieldUsername.setText("");
        textFieldPassword.setText(null);
        refreshUsers();
        refreshForms(null);
    }//GEN-LAST:event_buttonClearActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listUsers;
    private javax.swing.JMenu menuActive;
    private javax.swing.JMenu menuAdd;
    private javax.swing.JMenu menuDelete;
    private javax.swing.JMenuItem menuItemCheckAllActive;
    private javax.swing.JMenuItem menuItemCheckAllAdd;
    private javax.swing.JMenuItem menuItemCheckAllDelete;
    private javax.swing.JMenuItem menuItemCheckAllUpdate;
    private javax.swing.JMenuItem menuItemUnCheckAllAdd;
    private javax.swing.JMenuItem menuItemUnCheckAllDelete;
    private javax.swing.JMenuItem menuItemUnCheckAllUpdate;
    private javax.swing.JMenuItem menuItemUncheckAllActive;
    private javax.swing.JMenu menuUpdate;
    private javax.swing.JTable tablePrivileges;
    private javax.swing.JTextArea textAreaRemarks;
    private javax.swing.JTextField textFieldPassword;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refresh() {
                refreshUsers();
                refreshForms(null);
    }

    @Override
    protected void postInit() {
        ComponentHandler.setModelListener(tablePrivileges);
    }

    @Override
    protected void handlePrivilege() {
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonAdd.setVisible(false);
        }
        if (privilege.getIsDelete() == null || (!privilege.getIsDelete())) {
            buttonDelete.setVisible(false);
        }
        if (privilege.getIsUpdate() == null || (!privilege.getIsUpdate())) {
            buttonUpdate.setVisible(false);
        }
    }

    @Override
    protected void initComponentImplementation() {
        initComponents();
    }

    private void refreshUsers() {
        buttonDelete.setEnabled(false);
        buttonUpdate.setEnabled(false);
        buttonAdd.setEnabled(true);
        try {
            SimpleExpression eq = Restrictions.eq("isDeleted", false);
            listUsers.setListData(
                    DatabaseManager.getData(com.school.model.TgUser.class, eq)
                    .toArray());
        } catch (Exception ex) {
            AppMsg.error(this, D_Msg.MSG_6,ex);
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshForms(TgUser user) {
        ComponentHandler.emptyTable(tablePrivileges);
        DefaultTableModel model = (DefaultTableModel) tablePrivileges.getModel();
        try {
            if (user != null) {
                List<UserPrivilege> privilegeList = DatabaseQueryExecuter.getPrivileges(user);
                for (int i = 0; i < privilegeList.size(); i++) {
                    UserPrivilege object = (UserPrivilege) privilegeList.get(i);
                    model.addRow(new Object[]{object, object.getIsActive(), object.getIsAdd(), object.getIsDelete(), object.getIsUpdate()});
                }
                return;
            }
            List list = DatabaseManager.getData(Module.class);
            Iterator it = list.iterator();
            while (it.hasNext()) {
                Module object = (Module) it.next();
                model.addRow(new Object[]{object, defaultCheckboxState, defaultCheckboxState, defaultCheckboxState});
            }

//            String[] forms = constant.Forms.forms;
//            for(String str : forms){
//                DatabaseManager.addData(new Module(str,str.replace("JFrame", ""),null));
//                model.addRow(new Object[]{str});
//            }
        } catch (Exception ex) {
            Logger.getLogger(AppLog.ERROR_LOG).log(Level.SEVERE, null, ex);
        }
    }

    private void setAllCheck(int column, boolean b) {
        int totalRows = tablePrivileges.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            tablePrivileges.setValueAt(b, i, column);
        }
    }
}