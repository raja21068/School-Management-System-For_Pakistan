/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.FeesStructure;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.Years;
import com.school.model.Fees;
import com.school.model.FeesDiscount;
import com.school.model.Months;
import com.school.model.SchoolConfig;
import com.school.model.UserPrivilege;
import com.school.constant.Configuration;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.hibernate.criterion.Restrictions;
import com.school.report.bean.ChallanReportBean;
import com.school.utils.ComponentHandler;
import com.school.report.bean.StudentReportBean;
import com.jtable.sort.JTableJKSort;
import com.school.utils.MyYear;
import java.io.InputStream;

/**
 * This fees frame deals with:
 * <ul>
 * <li> <b>Generate Fees / Challan</b> - adds the monthly fees of students in
 * database.</li>
 * <li> <b>Shows Class Student</b> - those students will not shown which have
 * fixed fees amount zero.</li>
 * <li> <b>Print Challan</b> - from list of <u>unpaid students</u> </li>
 * <li> <b>Print List</b> -
 * <ul>
 * <li><b>Unpaid Students</b> - students which has not paid their fees of
 * selected month. </li>
 * <li><b>Paid Students</b> - students which has paid their fees of selected
 * month. </li>
 * <li><b>Defaulter Students</b> - students which has paid their fees and total
 * arrears.</li>
 * </ul>
 * </li>
 * </ul>
 * <b><u>FEATURES:</u></b>
 * <ul>
 * <li>select the row from student, it shows the challan paying history.</li>
 * </ul>
 * <b><u>WARNING:</u></b>
 * if a student a fixed fee <tt>true</tt> and its amount is <u>ZERO</u> then the
 * that student will not show in the class student table.<br/>
 * <b><u>FOR PROGRAMMER:</u></b>
 * 1. During generating challan issue date will store in remarks column, that
 * will be used when printing challan.<br/>
 * 2. Challan of a student cannot be generated twice in same month of an year.
 *
 * @author JAY KUMAR
 */
public class FeeJFrame extends javax.swing.JFrame {

    /**
     * Creates new form FeeJFrame
     */
    UserPrivilege privilege;
    SchoolConfig nameConfig = null;

    /**
     * User Privilege is derived from bean.User when a user in loged in.
     *
     * @param privilege - bean.UserPrivilege
     */
    public FeeJFrame(UserPrivilege privilege) {
        initComponents();
        JTableJKSort sort = new JTableJKSort(tableStudents);
        JTableJKSort sort2 = new JTableJKSort(tableUnpaidStudents);
        JTableJKSort sort3 = new JTableJKSort(tablePaidStudents);
        JTableJKSort sort4 = new JTableJKSort(tableDefaulter);
        JTableJKSort sort5 = new JTableJKSort(tableDefaulterFilteration);
        labelMonthly.setText("Tution");
        labelTution.setVisible(false);
        textFieldTutionfee.setVisible(false);
        labelCard.setVisible(false);
        textFieldCardFee.setVisible(false);
        ComponentHandler.setJFrameCenterPostion(this);
        ComponentHandler.setModelListener(tableStudents);
        ComponentHandler.setModelListener(tablePaidMonths);
        ComponentHandler.setModelListener(tablePaidStudents);
        ComponentHandler.setModelListener(tableUnpaidMonths);
        ComponentHandler.setModelListener(tableUnpaidStudents);
        ComponentHandler.setModelListener(tableDefaulter);
        ComponentHandler.setModelListener(tableDefaulterFilteration);
        this.privilege = privilege;
        getSchoolConfig();
        studentTableModelSelection();

    }

    /**
     * refresh the data and check privileges
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if (!b) {
            return;
        }
        requestFocusInWindow();
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonGenerateChallan.setVisible(false);
        }
        if (privilege.getIsUpdate() == null || (!privilege.getIsUpdate())) {
            buttonSaveStudentFees.setVisible(false);
        }

        new Thread() {
            @Override
            public void run() {
                ComponentHandler.setYear(comboBoxYear);
                ComponentHandler.setYear(comboBoxYear2nd);
                ComponentHandler.setYear(comboBoxYearDefaulterStudent);
                ComponentHandler.setYear(comboBoxYearUnpaidOther);
                comboBoxYearDefaulterStudentItemStateChanged(null);
                ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
                ComponentHandler.setMonth(comboBoxYear2nd, comboBoxMonth2nd);
                ComponentHandler.setMonth(comboBoxYearUnpaidOther, comboBoxMonthUnpaidOther);
                ComponentHandler.setCampus(comboBoxCampus);
                ComponentHandler.setBatch(comboBoxBatch);
                ComponentHandler.setSection(comboBoxSection);
                comboBoxSectionItemStateChanged(null);
                refreshCampusDefaulterStudents();
                refreshStudents();
                setFeesStructure();
                refreshUnpaidPaidStudent();
                refreshDefaulterStudents();
                ComponentHandler.setCurrentMonth(comboBoxMonth);
            }
        }.start();


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenuPaymentPanelTable = new javax.swing.JPopupMenu();
        menuItemSelectAll = new javax.swing.JMenuItem();
        menuItemUnckeck = new javax.swing.JMenuItem();
        popupMenuStudents = new javax.swing.JPopupMenu();
        menuItemStudentCheck = new javax.swing.JMenuItem();
        menuItemStudentUnckeck = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxCampus = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxYear = new javax.swing.JComboBox();
        comboBoxMonth = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboBoxSection = new javax.swing.JComboBox();
        comboBoxClass = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        comboBoxBatch = new javax.swing.JComboBox();
        checkBoxAllStudents = new javax.swing.JCheckBox();
        checkBoxIncludeLeaved = new javax.swing.JCheckBox();
        checkBoxStudent1Months = new javax.swing.JCheckBox();
        checkBoxStudent2Months = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        textFieldAdmissionFee = new javax.swing.JTextField();
        textFieldTutionfee = new javax.swing.JTextField();
        labelTution = new javax.swing.JLabel();
        textFieldExamFee = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        labelCard = new javax.swing.JLabel();
        textFieldCardFee = new javax.swing.JTextField();
        labelMonthly = new javax.swing.JLabel();
        textFieldMonthlyFee = new javax.swing.JTextField();
        textFieldLateFee = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        dateChooserDueDate = new com.toedter.calendar.JDateChooser();
        buttonGenerateChallan = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePaidMonths = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableUnpaidMonths = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        textFieldTotalArrers = new javax.swing.JTextField();
        checkBoxApplyDiscount = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        dateChooserIssueDate = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelStudents = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        checkBoxFixedZero = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        scrollPaneTableUnpaid = new javax.swing.JScrollPane();
        tableUnpaidStudents = new javax.swing.JTable();
        textFieldSearch = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        buttonPrintUnpaidChallan = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        comboBoxYear2nd = new javax.swing.JComboBox();
        comboBoxMonth2nd = new javax.swing.JComboBox();
        buttonPrintChallan2Month = new javax.swing.JButton();
        buttonPrintChallan1Month = new javax.swing.JButton();
        checkBoxAnotherMonth = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        comboBoxYearUnpaidOther = new javax.swing.JComboBox();
        comboBoxMonthUnpaidOther = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        dateChooserPayment = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        buttonSaveStudentFees = new javax.swing.JButton();
        checkBoxDuplicate = new javax.swing.JCheckBox();
        checkBoxLateFee = new javax.swing.JCheckBox();
        textFieldDuplicateAmount = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablePaidStudents = new javax.swing.JTable();
        buttonPrintPaidChallan = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableDefaulterFilteration = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        comboBoxCampusDefaulter = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        comboBoxYearDefaulterStudent = new javax.swing.JComboBox();
        comboBoxMonthToDefaulterStudent = new javax.swing.JComboBox();
        buttonFilterDefaulter = new javax.swing.JButton();
        buttonPrintDefaulterFilter = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableDefaulter = new javax.swing.JTable();
        buttonPrintDefaulter = new javax.swing.JButton();

        menuItemSelectAll.setText("Check All");
        menuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSelectAllActionPerformed(evt);
            }
        });
        popupMenuPaymentPanelTable.add(menuItemSelectAll);

        menuItemUnckeck.setText("Uncheck All");
        menuItemUnckeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUnckeckActionPerformed(evt);
            }
        });
        popupMenuPaymentPanelTable.add(menuItemUnckeck);

        menuItemStudentCheck.setText("Check All");
        menuItemStudentCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStudentCheckActionPerformed(evt);
            }
        });
        popupMenuStudents.add(menuItemStudentCheck);

        menuItemStudentUnckeck.setText("Uncheck All");
        menuItemStudentUnckeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStudentUnckeckActionPerformed(evt);
            }
        });
        popupMenuStudents.add(menuItemStudentUnckeck);

        setTitle("Fees Management");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/pictures/Money-icon.png"))).getImage());
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("FEES MANAGEMENT");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Campus");

        comboBoxCampus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusItemStateChanged(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Year & Month "));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Session");

        comboBoxYear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearItemStateChanged(evt);
            }
        });

        comboBoxMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonthItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Class"));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Section");

        comboBoxSection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionItemStateChanged(evt);
            }
        });

        comboBoxClass.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClassItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Batch");

        comboBoxBatch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchItemStateChanged(evt);
            }
        });

        checkBoxAllStudents.setText("ALL STUDENTS");
        checkBoxAllStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllStudentsActionPerformed(evt);
            }
        });

        checkBoxIncludeLeaved.setText("INCLUDE LEFT");
        checkBoxIncludeLeaved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxIncludeLeavedActionPerformed(evt);
            }
        });

        checkBoxStudent1Months.setSelected(true);
        checkBoxStudent1Months.setText("1 Month");
        checkBoxStudent1Months.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStudent1MonthsActionPerformed(evt);
            }
        });

        checkBoxStudent2Months.setSelected(true);
        checkBoxStudent2Months.setText("2 Month");
        checkBoxStudent2Months.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStudent2MonthsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboBoxSection, javax.swing.GroupLayout.Alignment.TRAILING, 0, 109, Short.MAX_VALUE)
                            .addComponent(comboBoxBatch, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(checkBoxStudent1Months)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxStudent2Months)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxIncludeLeaved, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkBoxAllStudents, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxIncludeLeaved)
                    .addComponent(checkBoxStudent1Months)
                    .addComponent(checkBoxStudent2Months))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxAllStudents))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Admission");

        textFieldAdmissionFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        textFieldTutionfee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        labelTution.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelTution.setText("Tution");

        textFieldExamFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Exam");

        labelCard.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelCard.setText("Card");

        textFieldCardFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        labelMonthly.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelMonthly.setText("Monthly");

        textFieldMonthlyFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        textFieldLateFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        textFieldLateFee.setText("100");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Late");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Due Date");

        buttonGenerateChallan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonGenerateChallan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/table-sheet-icon.png"))); // NOI18N
        buttonGenerateChallan.setText("Generate Challan");
        buttonGenerateChallan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateChallanActionPerformed(evt);
            }
        });

        tablePaidMonths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student", "Month", "Amount", "year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePaidMonths.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablePaidMonths);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Paid Months", jPanel7);

        tableUnpaidMonths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student", "Month", "Amount", "year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUnpaidMonths.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableUnpaidMonths);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Unpaid Months", jPanel8);

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("TOTAL ARREARS");

        textFieldTotalArrers.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textFieldTotalArrers.setEnabled(false);

        checkBoxApplyDiscount.setSelected(true);
        checkBoxApplyDiscount.setText("Apply Discount & Fixed Fee");
        checkBoxApplyDiscount.setBorderPainted(true);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("Issue");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxCampus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldTotalArrers))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8)
                            .addComponent(labelMonthly)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldExamFee, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(textFieldAdmissionFee)
                            .addComponent(textFieldMonthlyFee)
                            .addComponent(textFieldLateFee))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelCard)
                                    .addComponent(labelTution))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textFieldTutionfee, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                    .addComponent(textFieldCardFee))
                                .addGap(38, 38, 38))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserDueDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserIssueDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(checkBoxApplyDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonGenerateChallan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel12, jLabel3, jLabel8, labelMonthly});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textFieldAdmissionFee, textFieldCardFee, textFieldExamFee, textFieldLateFee, textFieldMonthlyFee, textFieldTutionfee});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel15, jLabel18, labelCard, labelTution});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxCampus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(textFieldAdmissionFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(textFieldExamFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldTutionfee)
                            .addComponent(labelTution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCard)
                            .addComponent(textFieldCardFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMonthly)
                            .addComponent(textFieldMonthlyFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(textFieldLateFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(1, 1, 1))
                            .addComponent(dateChooserIssueDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(dateChooserDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkBoxApplyDiscount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonGenerateChallan, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textFieldTotalArrers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateChooserDueDate, dateChooserIssueDate, jLabel12, jLabel15, jLabel18, jLabel3, jLabel8, labelCard, labelMonthly, labelTution, textFieldAdmissionFee, textFieldCardFee, textFieldExamFee, textFieldLateFee, textFieldMonthlyFee, textFieldTutionfee});

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        tableStudents.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "GR#", "ST. Name", "Father", "Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStudents.setComponentPopupMenu(popupMenuStudents);
        tableStudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tableStudents);
        tableStudents.getColumnModel().getColumn(0).setPreferredWidth(30);

        checkBoxFixedZero.setText("Include Fixed Zero ");
        checkBoxFixedZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxFixedZeroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelStudentsLayout = new javax.swing.GroupLayout(panelStudents);
        panelStudents.setLayout(panelStudentsLayout);
        panelStudentsLayout.setHorizontalGroup(
            panelStudentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStudentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStudentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStudentsLayout.createSequentialGroup()
                        .addComponent(checkBoxFixedZero)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelStudentsLayout.setVerticalGroup(
            panelStudentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStudentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxFixedZero)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Students", panelStudents);

        tableUnpaidStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select", "GR#", "ST. Name", "Father", "Class", "Mothly Arrears", "Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUnpaidStudents.setComponentPopupMenu(popupMenuPaymentPanelTable);
        tableUnpaidStudents.getTableHeader().setReorderingAllowed(false);
        scrollPaneTableUnpaid.setViewportView(tableUnpaidStudents);
        tableUnpaidStudents.getColumnModel().getColumn(0).setMinWidth(40);
        tableUnpaidStudents.getColumnModel().getColumn(0).setPreferredWidth(40);
        tableUnpaidStudents.getColumnModel().getColumn(0).setMaxWidth(40);
        tableUnpaidStudents.getColumnModel().getColumn(1).setMinWidth(40);
        tableUnpaidStudents.getColumnModel().getColumn(1).setPreferredWidth(40);
        tableUnpaidStudents.getColumnModel().getColumn(1).setMaxWidth(60);

        textFieldSearch.setComponentPopupMenu(popupMenuPaymentPanelTable);
        textFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSearchActionPerformed(evt);
            }
        });

        buttonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Zoom-icon.png"))); // NOI18N
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        buttonPrintUnpaidChallan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrintUnpaidChallan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintUnpaidChallan.setText("Print");
        buttonPrintUnpaidChallan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintUnpaidChallanActionPerformed(evt);
            }
        });

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Challan"));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("2nd Month");
        jLabel17.setEnabled(false);

        comboBoxYear2nd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYear2nd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYear2ndItemStateChanged(evt);
            }
        });

        comboBoxMonth2nd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonth2nd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonth2ndItemStateChanged(evt);
            }
        });

        buttonPrintChallan2Month.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrintChallan2Month.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintChallan2Month.setText("2 Months");
        buttonPrintChallan2Month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintChallan2MonthActionPerformed(evt);
            }
        });

        buttonPrintChallan1Month.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrintChallan1Month.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintChallan1Month.setText("1 Month");
        buttonPrintChallan1Month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintChallan1MonthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxYear2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxMonth2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPrintChallan2Month, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPrintChallan1Month, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxMonth2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboBoxYear2nd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17))
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonPrintChallan2Month)
                        .addComponent(buttonPrintChallan1Month)))
                .addGap(25, 25, 25))
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonPrintChallan1Month, buttonPrintChallan2Month, comboBoxMonth2nd, comboBoxYear2nd, jLabel17});

        checkBoxAnotherMonth.setText("Another Month");
        checkBoxAnotherMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAnotherMonthActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("Month To");

        comboBoxYearUnpaidOther.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYearUnpaidOther.setEnabled(false);
        comboBoxYearUnpaidOther.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearUnpaidOtherItemStateChanged(evt);
            }
        });

        comboBoxMonthUnpaidOther.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonthUnpaidOther.setEnabled(false);
        comboBoxMonthUnpaidOther.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonthUnpaidOtherItemStateChanged(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("Paid Date");

        buttonSaveStudentFees.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-document-save-icon.png"))); // NOI18N
        buttonSaveStudentFees.setText("PAY");
        buttonSaveStudentFees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveStudentFeesActionPerformed(evt);
            }
        });

        checkBoxDuplicate.setText("Duplicate");
        checkBoxDuplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDuplicateActionPerformed(evt);
            }
        });

        checkBoxLateFee.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        checkBoxLateFee.setText("Late Fee");

        textFieldDuplicateAmount.setEnabled(false);
        textFieldDuplicateAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldDuplicateAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkBoxDuplicate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textFieldDuplicateAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxLateFee, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateChooserPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSaveStudentFees)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonSaveStudentFees, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(checkBoxLateFee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textFieldDuplicateAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(checkBoxDuplicate))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateChooserPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPaneTableUnpaid, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 14, Short.MAX_VALUE)
                        .addComponent(buttonPrintUnpaidChallan, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(checkBoxAnotherMonth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(comboBoxYearUnpaidOther, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxMonthUnpaidOther, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPrintUnpaidChallan, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(comboBoxYearUnpaidOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboBoxMonthUnpaidOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(checkBoxAnotherMonth))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonSearch))))
                .addGap(7, 7, 7)
                .addComponent(scrollPaneTableUnpaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonPrintUnpaidChallan, buttonSearch, checkBoxAnotherMonth, comboBoxMonthUnpaidOther, comboBoxYearUnpaidOther, jLabel10, textFieldSearch});

        jTabbedPane1.addTab("Unpaid", jPanel5);

        tablePaidStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GR#", "ST. Name", "Father", "Class", "Paid Amount", "Paid Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePaidStudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tablePaidStudents);
        tablePaidStudents.getColumnModel().getColumn(0).setMinWidth(30);
        tablePaidStudents.getColumnModel().getColumn(0).setPreferredWidth(50);
        tablePaidStudents.getColumnModel().getColumn(0).setMaxWidth(60);

        buttonPrintPaidChallan.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrintPaidChallan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintPaidChallan.setText("Print");
        buttonPrintPaidChallan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintPaidChallanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(buttonPrintPaidChallan, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPrintPaidChallan, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Paid", jPanel6);

        tableDefaulterFilteration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GR#", "ST. Name", "Father", "Class", "Session", "Arrears", "Campus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDefaulterFilteration.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableDefaulterFilteration.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tableDefaulterFilteration);
        tableDefaulterFilteration.getColumnModel().getColumn(0).setMinWidth(50);
        tableDefaulterFilteration.getColumnModel().getColumn(0).setPreferredWidth(50);
        tableDefaulterFilteration.getColumnModel().getColumn(1).setMinWidth(90);
        tableDefaulterFilteration.getColumnModel().getColumn(1).setPreferredWidth(120);
        tableDefaulterFilteration.getColumnModel().getColumn(2).setMinWidth(90);
        tableDefaulterFilteration.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableDefaulterFilteration.getColumnModel().getColumn(3).setMinWidth(70);
        tableDefaulterFilteration.getColumnModel().getColumn(3).setPreferredWidth(80);
        tableDefaulterFilteration.getColumnModel().getColumn(4).setMinWidth(70);
        tableDefaulterFilteration.getColumnModel().getColumn(4).setPreferredWidth(80);
        tableDefaulterFilteration.getColumnModel().getColumn(5).setMinWidth(60);
        tableDefaulterFilteration.getColumnModel().getColumn(5).setPreferredWidth(70);
        tableDefaulterFilteration.getColumnModel().getColumn(6).setMinWidth(90);
        tableDefaulterFilteration.getColumnModel().getColumn(6).setPreferredWidth(150);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Campus");

        comboBoxCampusDefaulter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampusDefaulter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusDefaulterItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Month To");

        comboBoxYearDefaulterStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxYearDefaulterStudent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxYearDefaulterStudentItemStateChanged(evt);
            }
        });

        comboBoxMonthToDefaulterStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxMonthToDefaulterStudent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMonthToDefaulterStudentItemStateChanged(evt);
            }
        });

        buttonFilterDefaulter.setText("Filter");
        buttonFilterDefaulter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFilterDefaulterActionPerformed(evt);
            }
        });

        buttonPrintDefaulterFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon2.png"))); // NOI18N
        buttonPrintDefaulterFilter.setText("Print");
        buttonPrintDefaulterFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintDefaulterFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxCampusDefaulter, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxYearDefaulterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxMonthToDefaulterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonFilterDefaulter, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonPrintDefaulterFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(comboBoxCampusDefaulter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(comboBoxYearDefaulterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboBoxMonthToDefaulterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonPrintDefaulterFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(buttonFilterDefaulter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Defaulter Filteration", jPanel11);

        tableDefaulter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GR#", "ST. Name", "Father", "Class", "Session", "Arrears", "Campus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDefaulter.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableDefaulter.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tableDefaulter);
        tableDefaulter.getColumnModel().getColumn(0).setMinWidth(50);
        tableDefaulter.getColumnModel().getColumn(0).setPreferredWidth(50);
        tableDefaulter.getColumnModel().getColumn(1).setMinWidth(90);
        tableDefaulter.getColumnModel().getColumn(1).setPreferredWidth(120);
        tableDefaulter.getColumnModel().getColumn(2).setMinWidth(90);
        tableDefaulter.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableDefaulter.getColumnModel().getColumn(3).setMinWidth(70);
        tableDefaulter.getColumnModel().getColumn(3).setPreferredWidth(80);
        tableDefaulter.getColumnModel().getColumn(4).setMinWidth(70);
        tableDefaulter.getColumnModel().getColumn(4).setPreferredWidth(80);
        tableDefaulter.getColumnModel().getColumn(5).setMinWidth(60);
        tableDefaulter.getColumnModel().getColumn(5).setPreferredWidth(70);
        tableDefaulter.getColumnModel().getColumn(6).setMinWidth(90);
        tableDefaulter.getColumnModel().getColumn(6).setPreferredWidth(150);

        buttonPrintDefaulter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/print-icon.png"))); // NOI18N
        buttonPrintDefaulter.setText("Print List");
        buttonPrintDefaulter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrintDefaulterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(buttonPrintDefaulter, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPrintDefaulter)
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Defaulter", jPanel9);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshCampusDefaulterStudents() {
        ComponentHandler.setCampus(comboBoxCampusDefaulter);
        DefaultComboBoxModel model = (DefaultComboBoxModel) comboBoxCampusDefaulter.getModel();
        model.addElement("--All--");
    }

    private void buttonGenerateChallanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateChallanActionPerformed
        Months mon = (Months) comboBoxMonth.getSelectedItem();
        Date dueDate = dateChooserDueDate.getDate();
        // Issue Date will be store in remarks column
        Date issueDate = dateChooserIssueDate.getDate();
        if (mon == null) {
           
            return;
        }
        if (dueDate == null || issueDate == null) {
            JOptionPane.showMessageDialog(this, "DUE DATE & ISSUE DATE shouldn't be EMPTY..!");
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");
        String issueDateString = sdf.format(issueDate);

        if (!checkBoxApplyDiscount.isSelected()) {
            int option = JOptionPane.showConfirmDialog(this, "Do you want to want to apply dicount / fixed fees?", "Optional", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                checkBoxApplyDiscount.setSelected(true);
            }
        }
        try {
            int admission = 0, tution = 0, exam = 0, card = 0, monthly = 0, other = 0, late = 0, remaining;
            try {
                admission = Integer.parseInt(textFieldAdmissionFee.getText().trim());
            } catch (Exception ex) {
            }
            try {
                tution = Integer.parseInt(textFieldTutionfee.getText().trim());
            } catch (Exception ex) {
            }
            try {
                exam = Integer.parseInt(textFieldExamFee.getText().trim());
            } catch (Exception ex) {
            }
            try {
                card = Integer.parseInt(textFieldCardFee.getText().trim());
            } catch (Exception ex) {
            }
            try {
                monthly = Integer.parseInt(textFieldMonthlyFee.getText().trim());
            } catch (Exception ex) {
            }
            try {
                late = Integer.parseInt(textFieldLateFee.getText().trim());
            } catch (Exception ex) {
            }


            int rows = tableStudents.getRowCount();

            for (int i = 0; i < rows; i++) {
                if (!(boolean) tableStudents.getValueAt(i, 0)) {
                    continue;
                }

                Student st = (Student) tableStudents.getValueAt(i, 2);
                StudentClassReg stReg = (StudentClassReg) tableStudents.getValueAt(i, 4);
                
                List list = DatabaseQueryExecuter.getStudentForFee(st.getStudentId(),mon.getMonthId());

                int described = monthly;
                List set = DatabaseQueryExecuter.getFeesDiscounts(st);
                /*If student has discount or fixed fees fees will be generated according to that.*/
                if (!set.isEmpty()) {
                    FeesDiscount discount = (FeesDiscount) set.toArray()[0];
                    if (discount.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES) {
                        int monthFee = discount.getFixedAmount();
                        described = monthFee;
//                        remaining = (remaining - monthly);
//                        remaining += monthFee;
                    } else {
//                        remaining -= discount.getDiscountAmount();
                        described = monthly - discount.getDiscountAmount();
                    }
                }
                remaining = admission + tution + exam + card + described + other;

                if (list.isEmpty()) {
                    Fees fee = new Fees(mon, stReg, admission, tution, exam, card, described, other, late, 0, dueDate, remaining, null, issueDateString);

                    try {
                        DatabaseManager.addData(fee);
               
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                } else {
//                    int option = JOptionPane.showConfirmDialog(this, "The Fees Of " + st.getStudentName() + " of " + mon.getMonthName() + "  is already generated.\nDo you want to generate another reciept for month?", "Warning", JOptionPane.NO_OPTION);
                    JOptionPane.showMessageDialog(this, "The Fees Of " + st.getStudentName() + " of " + mon.getMonthName() + "  is already generated.\nDo you want to generate another reciept for month?", "Warning", JOptionPane.WARNING_MESSAGE);
//                    if (option == JOptionPane.YES_OPTION) {
//                        Fees fee = new Fees(mon, stReg, admission, tution, exam, card, monthly, other, late, 0, dateChooserDueDate.getDate(), remaining, null, "");
//                        DatabaseManager.addData(fee);
//                        DatabaseManager.refresh(stReg);
//                    }
                }
            }
            JOptionPane.showMessageDialog(this, "Fees Generated..!");

            refreshUnpaidPaidStudent();
            refreshDefaulterStudents();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonGenerateChallanActionPerformed

    private void checkBoxAllStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllStudentsActionPerformed
        refreshStudents();
        refreshUnpaidPaidStudent();
    }//GEN-LAST:event_checkBoxAllStudentsActionPerformed

    private void buttonSaveStudentFeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveStudentFeesActionPerformed
        try {
            Date paidDate = dateChooserPayment.getDate();
            if (paidDate == null) {
                JOptionPane.showMessageDialog(this, "please select PAID Date..");
                return;
            }
            int rows = tableUnpaidStudents.getRowCount();
            for (int i = 0; i < rows; i++) {
                if (!(boolean) tableUnpaidStudents.getValueAt(i, 0)) {
                    continue;
                }
//                fess.setPaidFee(Integer.parseInt(textFieldPaymentAmount.getText().trim()));
                Fees fess = (Fees) tableUnpaidStudents.getValueAt(i, 5);
                fess.setPaidDate(paidDate);
                if (checkBoxLateFee.isSelected()) {
                    fess.setRemaining(fess.getRemaining() + fess.getLateFee());
                }
                fess.setPaidFee(fess.getRemaining());
                fess.setRemaining(0);
                
                DatabaseManager.updateData(fess);
            }
            refreshStudents();
            appendFees();
            //refreshUnpaidPaidStudent();
            refreshDefaulterStudents();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonSaveStudentFeesActionPerformed

    private void menuItemUnckeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUnckeckActionPerformed
        setAllCheckInTablePayment(false);
    }//GEN-LAST:event_menuItemUnckeckActionPerformed

    private void menuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSelectAllActionPerformed
        setAllCheckInTablePayment(true);
    }//GEN-LAST:event_menuItemSelectAllActionPerformed

    private void comboBoxClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClassItemStateChanged
        refreshStudents();
        setFeesStructure();
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxClassItemStateChanged

    private void comboBoxSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionItemStateChanged
        setClass();
        setFeesStructure();
        refreshStudents();
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxSectionItemStateChanged

    private void comboBoxYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearItemStateChanged
        ComponentHandler.setMonth(comboBoxYear, comboBoxMonth);
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxYearItemStateChanged

    private void comboBoxCampusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusItemStateChanged
        refreshStudents();
        setFeesStructure();
        appendFees();
        // refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxCampusItemStateChanged

    private void menuItemStudentCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStudentCheckActionPerformed
        setAllCheckInStudent(true);
    }//GEN-LAST:event_menuItemStudentCheckActionPerformed

    private void menuItemStudentUnckeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStudentUnckeckActionPerformed
        setAllCheckInStudent(false);
    }//GEN-LAST:event_menuItemStudentUnckeckActionPerformed

    private void comboBoxBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchItemStateChanged
        refreshStudents();
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxBatchItemStateChanged

    private void comboBoxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonthItemStateChanged
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_comboBoxMonthItemStateChanged

    private void textFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSearchActionPerformed
        buttonSearchActionPerformed(null);

    }//GEN-LAST:event_textFieldSearchActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        String str = textFieldSearch.getText();
        int rows = tableUnpaidStudents.getRowCount();
        int selected = tableUnpaidStudents.getSelectedRow() + 1;

        for (int i = selected; i < rows; i++) {
            Student st = (Student) tableUnpaidStudents.getValueAt(i, 2);
            if (st.getStudentName().toLowerCase().contains(str.toLowerCase())) {
                tableUnpaidStudents.setRowSelectionInterval(i, i);
                scrollPaneTableUnpaid.getVerticalScrollBar().setValue(i * 20);
                return;
            }
        }
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void checkBoxIncludeLeavedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxIncludeLeavedActionPerformed
        refreshStudents();
    }//GEN-LAST:event_checkBoxIncludeLeavedActionPerformed

    private void buttonPrintDefaulterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintDefaulterActionPerformed
        printDefaulter(tableDefaulter, false);
    }//GEN-LAST:event_buttonPrintDefaulterActionPerformed

    private void comboBoxYear2ndItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYear2ndItemStateChanged
        ComponentHandler.setMonth(comboBoxYear2nd, comboBoxMonth2nd);
    }//GEN-LAST:event_comboBoxYear2ndItemStateChanged

    private void comboBoxMonth2ndItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonth2ndItemStateChanged
    }//GEN-LAST:event_comboBoxMonth2ndItemStateChanged

    private void checkBoxStudent1MonthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStudent1MonthsActionPerformed
        adjustCheckBoxs(evt);
        refreshStudents();
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_checkBoxStudent1MonthsActionPerformed

    private void checkBoxStudent2MonthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStudent2MonthsActionPerformed
        adjustCheckBoxs(evt);
        refreshStudents();
        appendFees();
        //refreshUnpaidPaidStudent();
    }//GEN-LAST:event_checkBoxStudent2MonthsActionPerformed

    private void buttonPrintUnpaidChallanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintUnpaidChallanActionPerformed
        printUnpaidChallan();
    }//GEN-LAST:event_buttonPrintUnpaidChallanActionPerformed

    private void buttonPrintPaidChallanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintPaidChallanActionPerformed
        printPaidChallan();
    }//GEN-LAST:event_buttonPrintPaidChallanActionPerformed

    private void checkBoxDuplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDuplicateActionPerformed
        if (checkBoxDuplicate.isSelected()) {
            textFieldDuplicateAmount.setEnabled(true);
        } else {
            textFieldDuplicateAmount.setEnabled(false);
            textFieldDuplicateAmount.setText("0");
        }
    }//GEN-LAST:event_checkBoxDuplicateActionPerformed

    private void buttonPrintChallan1MonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintChallan1MonthActionPerformed
        try {
            int rows = tableUnpaidStudents.getRowCount();
            int duplicateAmount = 0;
            if (checkBoxDuplicate.isSelected()) {
                String msg = "Do you want to print duplicate.?";
                try {
                    duplicateAmount = Integer.parseInt(textFieldDuplicateAmount.getText().trim());
                } catch (Exception ex) {
                }
                if (duplicateAmount <= 0) {
                    msg += "\nDuplicate amount is zero";
                }
                int option = JOptionPane.showConfirmDialog(this, msg);
                if (option == JOptionPane.NO_OPTION) {
                    checkBoxDuplicate.setSelected(false);
                } else if (option == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");

            ArrayList listFeeses = new ArrayList();
            for (int i = 0; i < rows; i++) {
                if (!(boolean) tableUnpaidStudents.getValueAt(i, 0)) {
                    continue;
                }
                Fees fess = (Fees) tableUnpaidStudents.getValueAt(i, 5);
                fess.setOtherFee(duplicateAmount);
                fess.setRemaining(fess.getRemaining() + duplicateAmount);
                
                ChallanReportBean bean = new ChallanReportBean();
                bean.setAddmission(fess.getAddmissionFee());
                bean.setClassName(fess.getStudentClassReg().getClasses().getClassName());
                bean.setDueDate(sdf.format(fess.getDueDate()));
                bean.setExam(fess.getExamFee());
                bean.setFatherName(fess.getStudentClassReg().getStudent().getFatherName());
                bean.setIssueDate(fess.getRemarks());
                bean.setLate(fess.getLateFee());
                bean.setMonths(fess.getMonthName());
                bean.setOther(fess.getOtherFee());
                bean.setStudentName(fess.getStudentClassReg().getStudent().getStudentName());
                bean.setTution(fess.getMonthlyFee());
                
                listFeeses.add(bean);
                DatabaseManager.updateData(fess);
            }
            Map<String, Object> params = new HashMap();
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(listFeeses);
            InputStream report = getClass().getResource("/report/Challan.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintChallan1MonthActionPerformed

    private void buttonPrintChallan2MonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintChallan2MonthActionPerformed
        try {
            int rows = tableUnpaidStudents.getRowCount();
            int duplicateAmount = 0;
            if (checkBoxDuplicate.isSelected()) {
                String msg = "Do you want to print duplicate.?";
                try {
                    duplicateAmount = Integer.parseInt(textFieldDuplicateAmount.getText().trim());
                } catch (Exception ex) {
                }
                if (duplicateAmount <= 0) {
                    msg += "\nDuplicate amount is zero";
                }
                int option = JOptionPane.showConfirmDialog(this, msg);
                if (option == JOptionPane.NO_OPTION) {
                    checkBoxDuplicate.setSelected(false);
                } else if (option == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }
            Months month2nd = (Months) comboBoxMonth2nd.getSelectedItem();
            if (month2nd == null) {
                return;
            }

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");

            ArrayList listFeeses = new ArrayList();
            for (int i = 0; i < rows; i++) {
                if (!(boolean) tableUnpaidStudents.getValueAt(i, 0)) {
                    continue;
                }
                Fees fess = (Fees) tableUnpaidStudents.getValueAt(i, 5);
                String monthName = "" + fess.getMonthName().substring(0, 3);
                int admissionFee = fess.getAddmissionFee();
                int examFee = fess.getExamFee();
                int monthlyFee = fess.getMonthlyFee();
                try {
                    List feessList = DatabaseQueryExecuter.getUnpaidFees(month2nd, fess.getStudentClassReg().getStudent());
                    if (feessList.size() < 1) {
                        JOptionPane.showMessageDialog(this, month2nd.getMonthName() + " CHALLAN of " + fess.getStudentClassReg().getStudent().getStudentName() + " is NOT GENERATED \nNOT PRINTED", "", JOptionPane.ERROR_MESSAGE);
                        continue;
                    } else if (feessList.size() == 1) {
                        Fees fees2nd = (Fees) feessList.get(0);
                        admissionFee += fees2nd.getAddmissionFee();
                        examFee += fees2nd.getExamFee();
                        monthlyFee += fees2nd.getMonthlyFee();

                        monthName += (" / " + fees2nd.getMonthName().substring(0, 3));
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error Occured During fetching of " + fess.getStudentClassReg().getStudent().getStudentName() + " \n HENCE NOT PRINTED");
                    ex.printStackTrace();
                    continue;
                }
                fess.setOtherFee(fess.getOtherFee() + duplicateAmount);
                ChallanReportBean bean = new ChallanReportBean();
                bean.setAddmission(admissionFee);
                bean.setClassName(fess.getStudentClassReg().getClasses().getClassName());
                bean.setDueDate(sdf.format(fess.getDueDate()));
                bean.setExam(examFee);
                bean.setFatherName(fess.getStudentClassReg().getStudent().getFatherName());
                bean.setIssueDate(fess.getRemarks());
                bean.setLate(fess.getLateFee());
                bean.setMonths(monthName);
                bean.setOther(fess.getOtherFee());
                bean.setStudentName(fess.getStudentClassReg().getStudent().getStudentName());
                bean.setTution(monthlyFee);
                listFeeses.add(bean);
                DatabaseManager.updateData(fess);
            }
            Map<String, Object> params = new HashMap();
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(listFeeses);
            InputStream report = getClass().getResource("/report/Challan.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonPrintChallan2MonthActionPerformed

    private void textFieldDuplicateAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldDuplicateAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldDuplicateAmountActionPerformed

    private void checkBoxFixedZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxFixedZeroActionPerformed
        refreshStudents();
    }//GEN-LAST:event_checkBoxFixedZeroActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
           
            setVisible(false);
        }
    }//GEN-LAST:event_formKeyReleased

    private void comboBoxCampusDefaulterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusDefaulterItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCampusDefaulterItemStateChanged

    private void comboBoxYearDefaulterStudentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearDefaulterStudentItemStateChanged
        ComponentHandler.setMonth(comboBoxYearDefaulterStudent, comboBoxMonthToDefaulterStudent);
    }//GEN-LAST:event_comboBoxYearDefaulterStudentItemStateChanged

    private void comboBoxMonthToDefaulterStudentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonthToDefaulterStudentItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxMonthToDefaulterStudentItemStateChanged

    private void buttonFilterDefaulterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFilterDefaulterActionPerformed
        try {
            ComponentHandler.emptyTable(tableDefaulterFilteration);
            Months monthFrom = (Months) comboBoxMonth.getSelectedItem();
            Months monthTo = (Months) comboBoxMonthToDefaulterStudent.getSelectedItem();
            Classes classes = (Classes) comboBoxClass.getSelectedItem();
            Object ob = comboBoxCampusDefaulter.getSelectedItem();
            if (monthFrom == null || monthTo == null || ob == null || classes == null) {
                return;
            }

            DefaultTableModel model = (DefaultTableModel) tableDefaulterFilteration.getModel();
            List<Object[]> result = null;

            // defaulter students of one month and two month
            if (checkBoxStudent1Months.isSelected() && checkBoxStudent2Months.isSelected()) {
                if (checkBoxAllStudents.isSelected() && ob instanceof String) {
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo);
                } else if (checkBoxAllStudents.isSelected() && ob instanceof Campus) {
                    Campus camp = (Campus) ob;
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, camp);
                } else if ((!checkBoxAllStudents.isSelected()) && ob instanceof String) {
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, classes);
                } else if ((!checkBoxAllStudents.isSelected()) && ob instanceof Campus) {
                    Campus camp = (Campus) ob;
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, camp, classes);
                }
            } else {
                if (checkBoxAllStudents.isSelected() && ob instanceof String) {
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, checkBoxStudent1Months.isSelected());
                } else if (checkBoxAllStudents.isSelected() && ob instanceof Campus) {
                    Campus camp = (Campus) ob;
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, camp, checkBoxStudent1Months.isSelected());
                } else if ((!checkBoxAllStudents.isSelected()) && ob instanceof String) {
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, classes, checkBoxStudent1Months.isSelected());
                } else if ((!checkBoxAllStudents.isSelected()) && ob instanceof Campus) {
                    Campus camp = (Campus) ob;
                    result = DatabaseQueryExecuter.getDefaulter(monthFrom, monthTo, camp, classes, checkBoxStudent1Months.isSelected());
                }
            }
            Iterator<Object[]> it = result.iterator();
            while (it.hasNext()) {
                Object[] object = it.next();
                Integer id = (Integer) object[0];
                String name = (String) object[1];
                String father = (String) object[2];
                String className = (String) object[3];
                String remarks = (String) object[4];
                String camp = (String) object[5];
                Integer amount = (Integer) object[6];
                model.addRow(new Object[]{id, name, father, className, remarks, amount, camp});
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_buttonFilterDefaulterActionPerformed

    private void buttonPrintDefaulterFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrintDefaulterFilterActionPerformed
        printDefaulter(tableDefaulterFilteration, true);
    }//GEN-LAST:event_buttonPrintDefaulterFilterActionPerformed

    private void comboBoxYearUnpaidOtherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxYearUnpaidOtherItemStateChanged
        ComponentHandler.setMonth(comboBoxYearUnpaidOther, comboBoxMonthUnpaidOther);

    }//GEN-LAST:event_comboBoxYearUnpaidOtherItemStateChanged

    private void comboBoxMonthUnpaidOtherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMonthUnpaidOtherItemStateChanged
        appendFees();
    }//GEN-LAST:event_comboBoxMonthUnpaidOtherItemStateChanged

    private void checkBoxAnotherMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAnotherMonthActionPerformed
        appendFees();
        comboBoxYearUnpaidOther.setEnabled(checkBoxAnotherMonth.isSelected());
        comboBoxMonthUnpaidOther.setEnabled(checkBoxAnotherMonth.isSelected());
    }//GEN-LAST:event_checkBoxAnotherMonthActionPerformed

    private void appendFees() {
        refreshUnpaidPaidStudent();
        if (comboBoxMonth.getSelectedItem().equals(comboBoxMonthUnpaidOther.getSelectedItem())) {
            return;
        }
        if (checkBoxAnotherMonth.isSelected()) {
            appendAnotherMonthUnpaidPaidStudent();
        }
    }

    private void printDefaulter(JTable table, boolean isFiltered) {
        try {
            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");
            String months = "";
            if (isFiltered) {
                Months monthFrom = (Months) comboBoxMonth.getSelectedItem();
                Months monthTo = (Months) comboBoxMonthToDefaulterStudent.getSelectedItem();
                months = (monthFrom + "(" + monthFrom.getYears() + ")-" + monthTo + "(" + monthTo.getYears() + ")");
            }
            params.put("today", sdf.format(new Date()));
            params.put("school", nameConfig != null ? nameConfig.getValueName() : "");
            params.put("monthDesc", months);
            int total = table.getRowCount();
            ArrayList result = new ArrayList();
            for (int no = 0; no < total; no++) {
                StudentReportBean bean = new StudentReportBean();
                bean.setGrNo("" + table.getValueAt(no, 0).toString());
                bean.setStudentName(table.getValueAt(no, 1).toString());
                bean.setFatherName(table.getValueAt(no, 2).toString());
                bean.setClassName(table.getValueAt(no, 3).toString());
                bean.setArrers(table.getValueAt(no, 5).toString());
                bean.setCampusName(table.getValueAt(no, 6).toString());
                result.add(bean);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(result);
            InputStream report = getClass().getResource("/report/DefaulterStudent.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured in reporting\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.err);
        }
    }

    private void setAllCheckInStudent(boolean b) {
        int totalRows = tableStudents.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            tableStudents.setValueAt(b, i, 0);
        }
    }

    private void setAllCheckInTablePayment(boolean b) {
        int totalRows = tableUnpaidStudents.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            tableUnpaidStudents.setValueAt(b, i, 0);
        }
    }

    private void setClass() {
        try {
            ComponentHandler.setClasses(comboBoxSection, comboBoxClass);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * Refresh student according to selection. filtered by: 1. one month student
     * & two month student. 2. if all student is selected then all student of
     * that campus appears. 3. if include left is select then also old student
     * is appeared.
     */
    private void refreshStudents() {
        DefaultTableModel model = (DefaultTableModel) tableStudents.getModel();
        ComponentHandler.emptyTable(tableStudents);

        Classes cl = (Classes) comboBoxClass.getSelectedItem();
        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        Years batch = (Years) comboBoxBatch.getSelectedItem();

        if (cl == null || camp == null || batch == null) {
            return;
        }

        comboBoxSection.setEnabled(false);
        comboBoxClass.setEnabled(false);

        if (!checkBoxAllStudents.isSelected()) {
            comboBoxSection.setEnabled(true);
            comboBoxClass.setEnabled(true);
        } else {
            comboBoxSection.setEnabled(false);
            comboBoxClass.setEnabled(false);
        }
        
        List list = DatabaseQueryExecuter.getStudentClassRegsForFee(batch.getYearId(),camp.getCampusId(),checkBoxAllStudents.isSelected(),cl.getClassId(),checkBoxIncludeLeaved.isSelected(),checkBoxStudent1Months.isSelected(),checkBoxStudent2Months.isSelected());

        for (int i=0;i<list.size();i++) {
            StudentClassReg st = (StudentClassReg) list.get(i);
            Student student = st.getStudent();
            
            Object[] discounts = DatabaseQueryExecuter.getFeesDiscounts(student).toArray();
            if (!checkBoxFixedZero.isSelected()) {
                boolean isFixed = false;
                boolean isZero = false;
                if (discounts.length > 0) {
                    FeesDiscount discount = (FeesDiscount) discounts[0];
                    isFixed = discount.getIsFixed().intValue() == com.school.constant.FeesPayment.FIXED_FEES;
                    isZero = discount.getFixedAmount().intValue() == 0;
                }
                if (discounts.length > 0) {
                    if (isFixed && isZero) {
                    } else {
                        model.addRow(new Object[]{false, st.getStudent().getGrNo(), st.getStudent(), st.getStudent().getFatherName(), st});
                    }
                } else {
                    model.addRow(new Object[]{false, st.getStudent().getGrNo(), st.getStudent(), st.getStudent().getFatherName(), st});
                }
            } else {
                model.addRow(new Object[]{false, st.getStudent().getGrNo(), st.getStudent(), st.getStudent().getFatherName(), st});
            }

        }
    }

    /**
     * set the fees amount of selected class in the monthly fees text field.
     * (appears if already set in fees structure frame.)
     *
     */
    private void setFeesStructure() {
        try {
            Classes cl = (Classes) comboBoxClass.getSelectedItem();
            Campus camp = (Campus) comboBoxCampus.getSelectedItem();
            Integer feesAmount =   getFeesAmount(cl, camp);
            if(feesAmount==null){
                JOptionPane.showMessageDialog(this, "Fees of this class is not set","Not Fees Set",JOptionPane.ERROR_MESSAGE);
            }
            textFieldMonthlyFee.setText(feesAmount==null?"0":feesAmount.toString());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    private Integer getFeesAmount(Classes cl, Campus camp) throws Exception {
        if (cl == null || camp == null) {
            return null;
        }
        
        List list = DatabaseQueryExecuter.getFeesStructure(camp.getCampusId(), cl.getClassId());
        if (!list.isEmpty()) {
            return ((FeesStructure) list.get(0)).getAmount();
        } else {
            return null;
        }
    }

    private void studentTableModelSelection() {
        ComponentHandler.setModelListenerForButton(tableStudents, buttonGenerateChallan, 0);

        tableStudents.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                refreshFeesRecord();
            }
        });

        ComponentHandler.setModelListenerForButton(tableUnpaidStudents, new JButton[]{buttonSaveStudentFees, buttonPrintChallan1Month, buttonPrintChallan2Month}, 0);

    }

    /**
     * Refresh the <u>paid</u> and <u>unpaid</u> fees tables.
     */
    private void refreshFeesRecord() {
        DefaultTableModel paidModel = (DefaultTableModel) tablePaidMonths.getModel();
        DefaultTableModel unpaidModel = (DefaultTableModel) tableUnpaidMonths.getModel();
        try {
            clearPaidUnpiadSection();
            int row = tableStudents.getSelectedRow();
            Student st = (Student) tableStudents.getValueAt(row, 2);
        
            List<Object[]> feesList = DatabaseQueryExecuter.getFees(st);
            
            int arrears = 0;
            for(int i=0;i<feesList.size();i++) {
                    Object[] obs = feesList.get(i);
                    Fees fees = (Fees) obs[0];
                    int yearName = (Integer)obs[1];
                    String monthName = (String)obs[2];
                    arrears += fees.getRemaining();
                    if (fees.getPaidFee() > 0) {
                        paidModel.addRow(new Object[]{st.getStudentName(), monthName, fees.getPaidFee(), yearName});
                    } else {
                        unpaidModel.addRow(new Object[]{st.getStudentName(), monthName, fees.getRemaining(), yearName});
                    }
            }
            textFieldTotalArrers.setText("" + arrears);
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * Clear unpaid fees table and unpaid fees table.
     */
    private void clearPaidUnpiadSection() {
        ComponentHandler.emptyTable(tablePaidMonths);
        ComponentHandler.emptyTable(tableUnpaidMonths);

    }

    /**
     * insert filtered UNPIAD fees and PAID fees of student according to campus,
     * class,session, one month or two month or both, or all student of campus.
     */
    private void refreshUnpaidPaidStudent() {

        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        MyYear years = (MyYear) comboBoxBatch.getSelectedItem();
        Months mon = (Months) comboBoxMonth.getSelectedItem();
        Classes cl = (Classes) comboBoxClass.getSelectedItem();

        if (cl == null || camp == null || years == null || mon == null) {
            return;
        }

        buttonPrintChallan1Month.setVisible(checkBoxStudent1Months.isSelected());
        buttonPrintChallan2Month.setVisible(checkBoxStudent2Months.isSelected());
       
        refreshUnPaidStudents(camp, years.getYears(), mon, cl, checkBoxStudent1Months.isSelected(), checkBoxStudent2Months.isSelected(), false);

        refreshPaidStudents(camp, years.getYears(), mon, cl, checkBoxStudent1Months.isSelected(), checkBoxStudent2Months.isSelected());
    }

    private void appendAnotherMonthUnpaidPaidStudent() {

        Campus camp = (Campus) comboBoxCampus.getSelectedItem();
        MyYear years = (MyYear) comboBoxBatch.getSelectedItem();
        Months mon = (Months) comboBoxMonthUnpaidOther.getSelectedItem();
        Classes cl = (Classes) comboBoxClass.getSelectedItem();

        if (cl == null || camp == null || years == null || mon == null) {
            return;
        }


        refreshUnPaidStudents(camp, years.getYears(), mon, cl, checkBoxStudent1Months.isSelected(), checkBoxStudent2Months.isSelected(), true);
    }

    /**
     * used by refreshUnpaidPaidStudent() for insert unpaid fees in table.
     *
     * @param camp
     * @param years
     * @param mon
     * @param cl
     * @param oneMonth - if true one month student's fee will inserted.
     * @param twoMonth - if true two month student's fee will inserted.
     */
    private void refreshUnPaidStudents(Campus camp, Years years, Months mon, Classes cl, boolean oneMonth, boolean twoMonth, boolean append) {
        buttonPrintChallan1Month.setEnabled(false);
        buttonPrintChallan2Month.setEnabled(false);
        DefaultTableModel model = (DefaultTableModel) tableUnpaidStudents.getModel();

        if (!append) {
            ComponentHandler.emptyTable(tableUnpaidStudents);
        }
        List<Object[]> list = null;
        try {
            if (oneMonth && twoMonth) {
                if (checkBoxAllStudents.isSelected()) {
                    list = DatabaseQueryExecuter.getUnpaidFees(camp, years, mon);
                } else {
                    list = DatabaseQueryExecuter.getUnpaidFees(camp, cl, years, mon);
                }
            } else {
                if (checkBoxAllStudents.isSelected()) {
                    list = DatabaseQueryExecuter.getUnpaidFees(camp, years, mon, oneMonth);
                } else {
                    list = DatabaseQueryExecuter.getUnpaidFees(camp, cl, years, mon, oneMonth);
                }
            }
            
            for (int i=0;i<list.size();i++) {
                Object[] obs = list.get(i); // [Fees, StudentClassReg,Student]
                Fees fee = (Fees) obs[0];
                StudentClassReg classReg = (StudentClassReg)obs[1];
                Student st = (Student)obs[2];
                fee.setMonthName((String)obs[3]);
                model.addRow(new Object[]{false, st.getGrNo(), st, st.getFatherName(), classReg, fee, fee.getPaidFee()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured..!" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * used by refreshUnpaidPaidStudent() for insert PAID fees in table.
     *
     * @param camp
     * @param years
     * @param mon
     * @param cl
     * @param oneMonth - if true one month student's fee will inserted.
     * @param twoMonth - if true two month student's fee will inserted.
     */
    private void refreshPaidStudents(Campus camp, Years years, Months mon, Classes cl, boolean oneMonth, boolean twoMonth) {
        DefaultTableModel model = (DefaultTableModel) tablePaidStudents.getModel();
        ComponentHandler.emptyTable(tablePaidStudents);
        List list = null;
        try {
            if (oneMonth && twoMonth) {
                if (checkBoxAllStudents.isSelected()) {
                    list = DatabaseQueryExecuter.getPaidFees(camp, years, mon);

                } else {
                    list = DatabaseQueryExecuter.getPaidFees(camp, cl, years, mon);
                }
            } else {
                if (checkBoxAllStudents.isSelected()) {
                    list = DatabaseQueryExecuter.getPaidFees(camp, years, mon, oneMonth);

                } else {
                    list = DatabaseQueryExecuter.getPaidFees(camp, cl, years, mon, oneMonth);
                }
            }
            for (Object ob : list) {
                Fees fee = (Fees) ob;
                Student st = fee.getStudentClassReg().getStudent();
                StudentClassReg classReg = fee.getStudentClassReg();
                model.addRow(new Object[]{st.getGrNo(), st, st.getFatherName(), classReg, fee.getPaidFee(), fee.getPaidDate()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Occured..!" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * Insert the defaulter students in table.
     */
    private void refreshDefaulterStudents() {
        try {
            ComponentHandler.emptyTable(tableDefaulter);
            DefaultTableModel model = (DefaultTableModel) tableDefaulter.getModel();
            List<Object[]> result = DatabaseQueryExecuter.getDefaulter();
            Iterator<Object[]> it = result.iterator();
            while (it.hasNext()) {
                Object[] object = it.next();
                Integer id = (Integer) object[0];
                String name = (String) object[1];
                String father = (String) object[2];
                String className = (String) object[3];
                String remarks = (String) object[4];
                String camp = (String) object[5];
                Integer amount = (Integer) object[6];
                model.addRow(new Object[]{id, name, father, className, remarks, amount, camp});
            }
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    /**
     *
     */
    private void getSchoolConfig() {
        try {
            List<SchoolConfig> list = DatabaseManager.getData(com.school.model.SchoolConfig.class,Restrictions.like("keyName", Configuration.SCHOOL));
            if (list.size() > 0) {
                nameConfig = list.get(0);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     *
     * @param evt
     */
    private void adjustCheckBoxs(ActionEvent evt) {
        if (evt.getSource() == checkBoxStudent1Months && (!checkBoxStudent2Months.isSelected())) {
            checkBoxStudent1Months.setSelected(true);
        } else if (evt.getSource() == checkBoxStudent2Months && (!checkBoxStudent1Months.isSelected())) {
            checkBoxStudent2Months.setSelected(true);
        }
    }

    /**
     *
     */
    private void printUnpaidChallan() {
        try {
            String camp = ((Campus) comboBoxCampus.getSelectedItem()).getName() + " ";
            String yearName = ((Years) comboBoxYear.getSelectedItem()).getYearName() + " ";
            String monthName = ((Months) comboBoxMonth.getSelectedItem()).getMonthName() + " ";

            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");
//            params.put("title", "UNPAID CHALLAN");
            params.put("col", "ARREARS");
            params.put("month", monthName + yearName);
            params.put("today", sdf.format(new Date()));
            params.put("school", nameConfig != null ? camp + nameConfig.getValueName() : camp);
            int total = tableUnpaidStudents.getRowCount();
            ArrayList result = new ArrayList();
            for (int no = 0; no < total; no++) {
                StudentReportBean bean = new StudentReportBean();
                bean.setGrNo("" + tableUnpaidStudents.getValueAt(no, 1));
                bean.setStudentName(tableUnpaidStudents.getValueAt(no, 2).toString());
                bean.setFatherName(tableUnpaidStudents.getValueAt(no, 3).toString());
                bean.setClassName(tableUnpaidStudents.getValueAt(no, 4).toString());
                bean.setArrers(tableUnpaidStudents.getValueAt(no, 5).toString());
                bean.setCampusName(camp);
                result.add(bean);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(result);
            InputStream report = getClass().getResource("/report/UnpaidChallan.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     *
     */
    private void printPaidChallan() {
        try {
            String camp = ((Campus) comboBoxCampus.getSelectedItem()).getName() + " ";
            String yearName = ((Years) comboBoxYear.getSelectedItem()).getYearName() + " ";
            String monthName = ((Months) comboBoxMonth.getSelectedItem()).getMonthName() + " ";

            Map<String, Object> params = new HashMap();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-YYYY");
            params.put("title", "PAID CHALLAN");
            params.put("col", "PAID AMOUNT");
            params.put("month", monthName + yearName);
            params.put("today", sdf.format(new Date()));
            params.put("school", nameConfig != null ? camp + nameConfig.getValueName() : camp);
            int total = tablePaidStudents.getRowCount();
            ArrayList result = new ArrayList();
            for (int no = 0; no < total; no++) {
                StudentReportBean bean = new StudentReportBean();
                bean.setGrNo("" + tablePaidStudents.getValueAt(no, 0));
                bean.setStudentName(tablePaidStudents.getValueAt(no, 1).toString());
                bean.setFatherName(tablePaidStudents.getValueAt(no, 2).toString());
                bean.setClassName(tablePaidStudents.getValueAt(no, 3).toString());
                bean.setArrers(tablePaidStudents.getValueAt(no, 4).toString());
                bean.setPaidDate(tablePaidStudents.getValueAt(no, 5).toString());
                result.add(bean);
            }
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(result);
            InputStream report = getClass().getResource("/report/PaidChallan.jasper").openStream();
            JasperPrint print = JasperFillManager.fillReport(report, params, ds);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFilterDefaulter;
    private javax.swing.JButton buttonGenerateChallan;
    private javax.swing.JButton buttonPrintChallan1Month;
    private javax.swing.JButton buttonPrintChallan2Month;
    private javax.swing.JButton buttonPrintDefaulter;
    private javax.swing.JButton buttonPrintDefaulterFilter;
    private javax.swing.JButton buttonPrintPaidChallan;
    private javax.swing.JButton buttonPrintUnpaidChallan;
    private javax.swing.JButton buttonSaveStudentFees;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JCheckBox checkBoxAllStudents;
    private javax.swing.JCheckBox checkBoxAnotherMonth;
    private javax.swing.JCheckBox checkBoxApplyDiscount;
    private javax.swing.JCheckBox checkBoxDuplicate;
    private javax.swing.JCheckBox checkBoxFixedZero;
    private javax.swing.JCheckBox checkBoxIncludeLeaved;
    private javax.swing.JCheckBox checkBoxLateFee;
    private javax.swing.JCheckBox checkBoxStudent1Months;
    private javax.swing.JCheckBox checkBoxStudent2Months;
    private javax.swing.JComboBox comboBoxBatch;
    private javax.swing.JComboBox comboBoxCampus;
    private javax.swing.JComboBox comboBoxCampusDefaulter;
    private javax.swing.JComboBox comboBoxClass;
    private javax.swing.JComboBox comboBoxMonth;
    private javax.swing.JComboBox comboBoxMonth2nd;
    private javax.swing.JComboBox comboBoxMonthToDefaulterStudent;
    private javax.swing.JComboBox comboBoxMonthUnpaidOther;
    private javax.swing.JComboBox comboBoxSection;
    private javax.swing.JComboBox comboBoxYear;
    private javax.swing.JComboBox comboBoxYear2nd;
    private javax.swing.JComboBox comboBoxYearDefaulterStudent;
    private javax.swing.JComboBox comboBoxYearUnpaidOther;
    private com.toedter.calendar.JDateChooser dateChooserDueDate;
    private com.toedter.calendar.JDateChooser dateChooserIssueDate;
    private com.toedter.calendar.JDateChooser dateChooserPayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel labelCard;
    private javax.swing.JLabel labelMonthly;
    private javax.swing.JLabel labelTution;
    private javax.swing.JMenuItem menuItemSelectAll;
    private javax.swing.JMenuItem menuItemStudentCheck;
    private javax.swing.JMenuItem menuItemStudentUnckeck;
    private javax.swing.JMenuItem menuItemUnckeck;
    private javax.swing.JPanel panelStudents;
    private javax.swing.JPopupMenu popupMenuPaymentPanelTable;
    private javax.swing.JPopupMenu popupMenuStudents;
    private javax.swing.JScrollPane scrollPaneTableUnpaid;
    private javax.swing.JTable tableDefaulter;
    private javax.swing.JTable tableDefaulterFilteration;
    private javax.swing.JTable tablePaidMonths;
    private javax.swing.JTable tablePaidStudents;
    private javax.swing.JTable tableStudents;
    private javax.swing.JTable tableUnpaidMonths;
    private javax.swing.JTable tableUnpaidStudents;
    private javax.swing.JTextField textFieldAdmissionFee;
    private javax.swing.JTextField textFieldCardFee;
    private javax.swing.JTextField textFieldDuplicateAmount;
    private javax.swing.JTextField textFieldExamFee;
    private javax.swing.JTextField textFieldLateFee;
    private javax.swing.JTextField textFieldMonthlyFee;
    private javax.swing.JTextField textFieldSearch;
    private javax.swing.JTextField textFieldTotalArrers;
    private javax.swing.JTextField textFieldTutionfee;
    // End of variables declaration//GEN-END:variables
}
