/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.school.view;

import com.school.model.Campus;
import com.school.model.Classes;
import com.school.model.Section;
import com.school.model.Student;
import com.school.model.StudentClassReg;
import com.school.model.UserPrivilege;
import com.school.model.Years;
import com.school.dao.DatabaseManager;
import com.school.dao.DatabaseQueryExecuter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.jtable.sort.JTableJKSort;
import com.school.constant.StudentClassRegContant;
import com.school.utils.ComponentHandler;

/**
 * This frame is used when students are shifted in other class or campus or
 * session. Generally every year students are shifted / transfered in higher
 * class.
 *
 * @author JAY KUMAR
 */
public class ClassShiftingJFrame extends javax.swing.JFrame {

    private final int CLASS_REG_COL = 4;
    private final int STUDENT_COL = 2;
    private final int SELECT_COL = 0;
    /**
     * <b>privilege</b> - bean.UserPrivilege For checking the permission given
     * to user
     */
    UserPrivilege privilege;

    /**
     * User Privilege is derived from bean.User when a user in loged in.
     *
     * @param privilege - bean.UserPrivilege
     */
    public ClassShiftingJFrame(UserPrivilege privilege) {
        initComponents();
        JTableJKSort sort = new JTableJKSort(tableStudentsTo);
        JTableJKSort sort2 = new JTableJKSort(tableStudentsFrom);
        ComponentHandler.setJFrameCenterPostion(this);
        setModelListener();
        ComponentHandler.setModelListener(tableStudentsTo);
        ComponentHandler.setModelListener(tableStudentsFrom);
        this.privilege = privilege;
    }

    /**
     * refresh the data and check privileges
     *
     * @param b
     */
    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
        if (!b) {
            return;
        }
        if (privilege.getIsAdd() == null || (!privilege.getIsAdd())) {
            buttonTransfer.setVisible(false);
        }

        new Thread() {
            @Override
            public void run() {
                setCampus(comboBoxCampusFrom);
                setCampus(comboBoxCampusTo);
                ComponentHandler.setBatch(comboBoxBatchFrom);
                ComponentHandler.setBatch(comboBoxBatchTo);
                setSection(comboBoxSectionFrom);
                setSection(comboBoxSectionTo);
                setClass(comboBoxSectionTo, comboBoxClassTo);
                setClass(comboBoxSectionFrom, comboBoxClassFrom);
                refreshStudentsFrom();
                refreshStudentsTo();
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        menuItemCheckAll = new javax.swing.JMenuItem();
        menuItemUncheckAll = new javax.swing.JMenuItem();
        jLabel4 = new javax.swing.JLabel();
        comboBoxCampusFrom = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboBoxSectionFrom = new javax.swing.JComboBox();
        comboBoxClassFrom = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        comboBoxBatchFrom = new javax.swing.JComboBox();
        checkBoxAllStudentsFrom = new javax.swing.JCheckBox();
        checkBoxIncludeLeavedFrom = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        comboBoxCampusTo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        comboBoxSectionTo = new javax.swing.JComboBox();
        comboBoxClassTo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        comboBoxBatchTo = new javax.swing.JComboBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableStudentsTo = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableStudentsFrom = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonTransfer = new javax.swing.JButton();

        menuItemCheckAll.setText("Check All");
        menuItemCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCheckAllActionPerformed(evt);
            }
        });
        jPopupMenu1.add(menuItemCheckAll);

        menuItemUncheckAll.setText("Uncheck All");
        menuItemUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUncheckAllActionPerformed(evt);
            }
        });
        jPopupMenu1.add(menuItemUncheckAll);

        setTitle("CLASS SHIFTING");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Campus");

        comboBoxCampusFrom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampusFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusFromItemStateChanged(evt);
            }
        });
        comboBoxCampusFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCampusFromActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Class"));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Section");

        comboBoxSectionFrom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSectionFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionFromItemStateChanged(evt);
            }
        });

        comboBoxClassFrom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxClassFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClassFromItemStateChanged(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Session");

        comboBoxBatchFrom.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatchFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchFromItemStateChanged(evt);
            }
        });

        checkBoxAllStudentsFrom.setText("ALL STUDENTS");
        checkBoxAllStudentsFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllStudentsFromActionPerformed(evt);
            }
        });

        checkBoxIncludeLeavedFrom.setText("INCLUDE LEFT");
        checkBoxIncludeLeavedFrom.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBoxSectionFrom, javax.swing.GroupLayout.Alignment.TRAILING, 0, 95, Short.MAX_VALUE)
                    .addComponent(comboBoxBatchFrom, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxClassFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(checkBoxAllStudentsFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxIncludeLeavedFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboBoxBatchFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxAllStudentsFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxIncludeLeavedFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxSectionFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClassFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Campus");

        comboBoxCampusTo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxCampusTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCampusToItemStateChanged(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Class"));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Section");

        comboBoxSectionTo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxSectionTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSectionToItemStateChanged(evt);
            }
        });

        comboBoxClassTo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxClassTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClassToItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Session");

        comboBoxBatchTo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxBatchTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxBatchToItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(comboBoxSectionTo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 109, Short.MAX_VALUE)
                    .addComponent(comboBoxBatchTo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxClassTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboBoxBatchTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(comboBoxSectionTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClassTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tableStudentsTo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableStudentsTo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gr#", "ST. Name", "Father", "Class"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStudentsTo.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tableStudentsTo);
        tableStudentsTo.getColumnModel().getColumn(0).setMinWidth(40);
        tableStudentsTo.getColumnModel().getColumn(0).setPreferredWidth(40);
        tableStudentsTo.getColumnModel().getColumn(0).setMaxWidth(40);

        tableStudentsFrom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableStudentsFrom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Gr#", "ST. Name", "Father", "Class"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableStudentsFrom.setComponentPopupMenu(jPopupMenu1);
        tableStudentsFrom.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tableStudentsFrom);
        tableStudentsFrom.getColumnModel().getColumn(0).setMinWidth(35);
        tableStudentsFrom.getColumnModel().getColumn(0).setPreferredWidth(35);
        tableStudentsFrom.getColumnModel().getColumn(0).setMaxWidth(35);
        tableStudentsFrom.getColumnModel().getColumn(1).setMinWidth(40);
        tableStudentsFrom.getColumnModel().getColumn(1).setPreferredWidth(40);
        tableStudentsFrom.getColumnModel().getColumn(1).setMaxWidth(40);

        jLabel2.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        jLabel2.setText("FROM");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 0, 24)); // NOI18N
        jLabel3.setText("TO");

        buttonTransfer.setFont(new java.awt.Font("Trajan Pro", 1, 14)); // NOI18N
        buttonTransfer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Actions-go-next-icon.png"))); // NOI18N
        buttonTransfer.setText("TRANSFER");
        buttonTransfer.setEnabled(false);
        buttonTransfer.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        buttonTransfer.setIconTextGap(20);
        buttonTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTransferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(397, 397, 397))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboBoxCampusFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane7))
                                .addGap(9, 9, 9)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(416, 416, 416))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboBoxCampusTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCampusTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxCampusFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(1, 1, 1)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonTransfer)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * called when JComboBox of Campus From (means from which campus student is
     * going to be transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxCampusFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusFromItemStateChanged
        refreshStudentsFrom();
    }//GEN-LAST:event_comboBoxCampusFromItemStateChanged

    /**
     * called when JComboBox of Section From (means from which section student
     * is going to be transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxSectionFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionFromItemStateChanged
        setClass(comboBoxSectionFrom, comboBoxClassFrom);
        refreshStudentsFrom();
    }//GEN-LAST:event_comboBoxSectionFromItemStateChanged

    /**
     * called when JComboBox of Class From (means from which class student is
     * going to be transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxClassFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClassFromItemStateChanged
        refreshStudentsFrom();
    }//GEN-LAST:event_comboBoxClassFromItemStateChanged

    /**
     * called when JComboBox of Session(Batch) From (means from which session
     * student is going to be transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxBatchFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchFromItemStateChanged
        refreshStudentsFrom();
    }//GEN-LAST:event_comboBoxBatchFromItemStateChanged

    /**
     * called when JCheckBox (All Students) is clicked.
     *
     * @param evt
     */
    private void checkBoxAllStudentsFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllStudentsFromActionPerformed
        refreshStudentsFrom();
    }//GEN-LAST:event_checkBoxAllStudentsFromActionPerformed

    /**
     * called when JComboBox of Campus To (means to which campus student is
     * transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxCampusToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCampusToItemStateChanged
        refreshStudentsTo();
    }//GEN-LAST:event_comboBoxCampusToItemStateChanged

    /**
     * called when JComboBox of Section To (means to which section student is
     * transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxSectionToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSectionToItemStateChanged
        setClass(comboBoxSectionTo, comboBoxClassTo);
        refreshStudentsTo();
    }//GEN-LAST:event_comboBoxSectionToItemStateChanged

    /**
     * called when JComboBox of Class To (means to which class student is
     * transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxClassToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClassToItemStateChanged
        refreshStudentsTo();
    }//GEN-LAST:event_comboBoxClassToItemStateChanged

    /**
     * called when JComboBox of Session(Batch) To (means to which session
     * student is transfered) is change /select any value.
     *
     * @param evt
     */
    private void comboBoxBatchToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxBatchToItemStateChanged
        refreshStudentsTo();
    }//GEN-LAST:event_comboBoxBatchToItemStateChanged

    private void comboBoxCampusFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCampusFromActionPerformed
        refreshStudentsFrom();
    }//GEN-LAST:event_comboBoxCampusFromActionPerformed

    private void buttonTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTransferActionPerformed
        transfer();
    }//GEN-LAST:event_buttonTransferActionPerformed

    private void menuItemCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCheckAllActionPerformed
        checkAll(true);
    }//GEN-LAST:event_menuItemCheckAllActionPerformed

    private void menuItemUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUncheckAllActionPerformed
        checkAll(false);
    }//GEN-LAST:event_menuItemUncheckAllActionPerformed

    /**
     * 
     * @param box - in which all campus is to inserted. 
     */
    private void setCampus(JComboBox box) {
        try {
            List list = DatabaseManager.getData(Campus.class);
            box.setModel(new DefaultComboBoxModel(list.toArray()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * 
     * @param box - in which all section is to be inserted. 
     */
    private void setSection(JComboBox box) {
        try {
            List list = DatabaseManager.getData(Section.class);
            box.setModel(new DefaultComboBoxModel(list.toArray()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * insert all class related to section selected in section combobox.
     * @param section - gives us object of bean.Section.
     * @param box - in which all class has to be added
     */
    private void setClass(JComboBox section, JComboBox box) {
        try {
            ComponentHandler.setClasses(section, box);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Occured..!\n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * Refresh the student in Jtable class student from.
     */
    private void refreshStudentsFrom() {
        refreshStudents(comboBoxCampusFrom, comboBoxClassFrom, comboBoxBatchFrom, checkBoxIncludeLeavedFrom, checkBoxAllStudentsFrom, tableStudentsFrom, true);
    }

    /**
     * Refresh the student in Jtable class student to.
     */
    private void refreshStudentsTo() {
        refreshStudents(comboBoxCampusTo, comboBoxClassTo, comboBoxBatchTo, null, null, tableStudentsTo, false);
    }

    /**
     * Refresh the student related with these parameters.
     * This method is used for both Tables ( Class From Students Table, Class To Student Table)
     * @param campuses - student will be filtered according to campus.
     * @param classes - student will be filtered according to class.
     * @param batchs - student will be filtered according to session.
     * @param includeLeaved - student will be filtered according to left student are selected or not.
     * @param allStudents - student will be filtered according to all student are selected or not.
     * @param table - in which JTable rows will be inserted.
     * @param isSelected if <tt>true</tt> then structure of rows related to (Class From Students Table) and if <tt>false</tt> then structure of rows related to (Class To Student Table)
     * NOTE:
     * This method is used in two methods (refreshStudentsFrom() , refreshStudentsTo()).
     */
    private void refreshStudents(JComboBox campuses, JComboBox classes, JComboBox batchs, JCheckBox includeLeaved, JCheckBox allStudents, JTable table, boolean isSelected) {
        ComponentHandler.emptyTable(table);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        Campus camp = (Campus) campuses.getSelectedItem();
        Classes clas = (Classes) classes.getSelectedItem();
        Years batch = (Years) batchs.getSelectedItem();
        if (camp == null || clas == null || batch == null) {
            return;
        }
        
        
        List<StudentClassReg> list = null;
        if (allStudents == null){
            list = DatabaseQueryExecuter.getStudentClassRegs(batch.getYearId(), camp.getCampusId(), clas.getClassId(), true );
        }else if(allStudents.isSelected()){
            list = DatabaseQueryExecuter.getStudentClassRegsAll(batch.getYearId(), camp.getCampusId(), (includeLeaved!=null && includeLeaved.isSelected()) );
        } else {
            list = DatabaseQueryExecuter.getStudentClassRegs(batch.getYearId(), camp.getCampusId(), clas.getClassId(), (includeLeaved!=null && includeLeaved.isSelected()) );
        }

        for (int i=0;i<list.size();i++) {
            StudentClassReg reg  = list.get(i);
            if (isSelected) {
                model.addRow(new Object[]{false, reg.getStudent().getGrNo(), reg.getStudent(), reg.getStudent().getFatherName(), reg});
            } else {
                model.addRow(new Object[]{reg.getStudent().getGrNo(), reg.getStudent(), reg.getStudent().getFatherName(), reg});
            }
        }
    }

    /**
     * Transfer the selected student from given ( Campus From , Section From , Batch From) To Select (Campus To , Section To , Batch To).
     * If any of student is already register to same campus , class and session, that student student cannot be re-register to same attributes.
     * (Campus, Session, Class) any of them must be change to transfer the student.
     */
    private void transfer() {
        Years batchTo = (Years) comboBoxBatchTo.getSelectedItem();
        Campus campusTo = (Campus) comboBoxCampusTo.getSelectedItem();
        Classes classesTo = (Classes) comboBoxClassTo.getSelectedItem();
        if (batchTo == null) {
            return;
        }
        int totalRows = tableStudentsFrom.getRowCount();
        for (int i = 0; i < totalRows; i++) {
            try {
                if ((boolean) tableStudentsFrom.getValueAt(i, SELECT_COL)) {
                    Student st = (Student) tableStudentsFrom.getValueAt(i, STUDENT_COL);
                    
                    List<StudentClassReg> list = DatabaseQueryExecuter.getStudentClassRegs(batchTo.getYearId(),campusTo.getCampusId(),classesTo.getClassId(),st.getStudentId());
                    if (list.size() > 0) {
                        JOptionPane.showMessageDialog(this, "Record not added..!\n" + st.getStudentName() + " is already exist in " + batchTo.getRemarks() + " in  " + campusTo.getName() + "\n", "ERROR", JOptionPane.WARNING_MESSAGE);
                        continue;
                    } else {
                        List<StudentClassReg> studentClassRegList = DatabaseQueryExecuter.getStudentClassRegs(st);
                        for (int j=0;j<studentClassRegList.size();j++){
                            StudentClassReg object = (StudentClassReg) studentClassRegList.get(j);
                            object.setIsLeaved(StudentClassRegContant.LEAVED);
                        }

                        DatabaseManager.updateData(st);
                        StudentClassReg classReg = new StudentClassReg(campusTo, st, classesTo, batchTo, com.school.constant.StudentClassRegContant.NOT_LEAVED, "");
                        DatabaseManager.addData(classReg);
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error Ocuured at Row:" + (i + 1) + "\n" + ex);
                ex.printStackTrace(System.err);
            }
        }
        JOptionPane.showMessageDialog(this, "Successfully Shifted... \n");
        try {
            refreshStudentsTo();
            refreshStudentsFrom();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error Ocuured at Refreshing \n" + ex.getMessage());
            ex.printStackTrace(System.err);
        }
    }

    /**
     * adds model listener to jtable (Class student from table).
     */
    private void setModelListener() {
        ComponentHandler.setModelListenerForButton(tableStudentsFrom, buttonTransfer, 0);

    }

    /**
     * 
     * @param b is <tt>true</tt> then all rows of Table (Student From) will be selected otherwise unselected. 
     */
    private void checkAll(boolean b) {
        int rows = tableStudentsFrom.getRowCount();
        for (int i = 0; i < rows; i++) {
            tableStudentsFrom.setValueAt(b, i, 0);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTransfer;
    private javax.swing.JCheckBox checkBoxAllStudentsFrom;
    private javax.swing.JCheckBox checkBoxIncludeLeavedFrom;
    private javax.swing.JComboBox comboBoxBatchFrom;
    private javax.swing.JComboBox comboBoxBatchTo;
    private javax.swing.JComboBox comboBoxCampusFrom;
    private javax.swing.JComboBox comboBoxCampusTo;
    private javax.swing.JComboBox comboBoxClassFrom;
    private javax.swing.JComboBox comboBoxClassTo;
    private javax.swing.JComboBox comboBoxSectionFrom;
    private javax.swing.JComboBox comboBoxSectionTo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JMenuItem menuItemCheckAll;
    private javax.swing.JMenuItem menuItemUncheckAll;
    private javax.swing.JTable tableStudentsFrom;
    private javax.swing.JTable tableStudentsTo;
    // End of variables declaration//GEN-END:variables
}
